{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\Checkout\\\\Contact-data\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport classes from './ContactData.css';\nimport axios from './../../../axios-order';\nimport { Formik, Form, Field } from 'formik';\nimport * as actions from './../../../store/actions/index';\nimport withErrorHandler from './../../../hoc/withErrorHandle/withErrorHandle';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {}\n    };\n\n    this.orderHandler = (orderData, event) => {\n      event.preventDefault();\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: orderData\n      };\n      this.props.onOrderBurger(order);\n    };\n  }\n\n  render() {\n    const ContactSchema = Yup.object().shape({\n      yourname: Yup.string().min(2, 'Too Short!').max(50, 'Too long!').required('Username is required'),\n      street: Yup.string().max(100, 'Too long!').required('Password is required'),\n      phone: Yup.number().positive('').integer('').required('Phone number is required'),\n      email: Yup.string().email('Invalid email').required('Email is required')\n    });\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        yourname: '',\n        street: '',\n        phone: '',\n        email: ''\n      },\n      validationSchema: ContactSchema,\n      onSubmit: values => {\n        e => this.orderHandler(values);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(\"div\", {\n      className: classes.Form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Contact Data\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Field, {\n      name: \"yourname\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), errors.yourname && touched.yourname ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, errors.yourname) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Street\"), React.createElement(Field, {\n      name: \"street\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), errors.street && touched.street ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, errors.street) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Phone\"), React.createElement(Field, {\n      name: \"phone\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), errors.phone && touched.phone ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, errors.phone) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Field, {\n      name: \"email\",\n      type: \"email\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), errors.email && touched.email ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, errors.email) : null, React.createElement(\"button\", {\n      type: \"submit\",\n      className: classes.Success,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"ORDER\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: orderData => dispatch(actions.purchaseBurger(orderData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\Checkout\\Contact-data\\ContactData.js"],"names":["React","Component","classes","axios","Formik","Form","Field","actions","withErrorHandler","connect","Yup","ContactData","state","orderForm","orderHandler","orderData","event","preventDefault","order","ingredients","props","price","onOrderBurger","render","ContactSchema","object","shape","yourname","string","min","max","required","street","phone","number","positive","integer","email","values","e","errors","touched","Label","Input","Invalid","Success","mapStateToProps","ings","burgerBuilder","totalPrice","loading","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAAQC,MAAR,EAAeC,IAAf,EAAoBC,KAApB,QAAgC,QAAhC;AACA,OAAO,KAAKC,OAAZ,MAAyB,gCAAzB;AACA,OAAOC,gBAAP,MAA6B,gDAA7B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AACA,MAAMC,WAAN,SAA0BV,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAC9BW,KAD8B,GACtB;AACJC,MAAAA,SAAS,EAAG;AADR,KADsB;;AAAA,SAIhCC,YAJgC,GAIjB,CAACC,SAAD,EAAWC,KAAX,KAAqB;AAE/BA,MAAAA,KAAK,CAACC,cAAN;AACG,YAAMC,KAAK,GAAG;AACVC,QAAAA,WAAW,EAAG,KAAKC,KAAL,CAAWD,WADf;AAEVE,QAAAA,KAAK,EAAG,KAAKD,KAAL,CAAWC,KAFT;AAGVN,QAAAA,SAAS,EAAEA;AAHD,OAAd;AAMA,WAAKK,KAAL,CAAWE,aAAX,CAAyBJ,KAAzB;AACP,KAd+B;AAAA;;AAgBhCK,EAAAA,MAAM,GAAE;AACJ,UAAMC,aAAa,GAAGd,GAAG,CAACe,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,MAAAA,QAAQ,EAAEjB,GAAG,CAACkB,MAAJ,GACTC,GADS,CACL,CADK,EACF,YADE,EAETC,GAFS,CAEL,EAFK,EAED,WAFC,EAGTC,QAHS,CAGA,sBAHA,CAD2B;AAKrCC,MAAAA,MAAM,EAAGtB,GAAG,CAACkB,MAAJ,GACRE,GADQ,CACJ,GADI,EACC,WADD,EAERC,QAFQ,CAEC,sBAFD,CAL4B;AAQrCE,MAAAA,KAAK,EAAGvB,GAAG,CAACwB,MAAJ,GACPC,QADO,CACE,EADF,EAEPC,OAFO,CAEC,EAFD,EAGPL,QAHO,CAGE,0BAHF,CAR6B;AAYrCM,MAAAA,KAAK,EAAE3B,GAAG,CAACkB,MAAJ,GACNS,KADM,CACA,eADA,EAENN,QAFM,CAEG,mBAFH;AAZ8B,KAAnB,CAAtB;AAkBA,WACI;AAAK,MAAA,SAAS,EAAI7B,OAAO,CAACS,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,oBAAC,MAAD;AACD,MAAA,aAAa,EAAI;AACbgB,QAAAA,QAAQ,EAAE,EADG;AAEbK,QAAAA,MAAM,EAAE,EAFK;AAGbC,QAAAA,KAAK,EAAE,EAHM;AAIbI,QAAAA,KAAK,EAAE;AAJM,OADhB;AAOA,MAAA,gBAAgB,EAAIb,aAPpB;AAQA,MAAA,QAAQ,EACPc,MAAM,IAAG;AACRC,QAAAA,CAAD,IAAO,KAAKzB,YAAL,CAAkBwB,MAAlB,CAAP;AACE,OAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYJ,CAAC;AAACE,MAAAA,MAAD;AAAQC,MAAAA;AAAR,KAAD,KACE;AAAK,MAAA,SAAS,EAAIvC,OAAO,CAACG,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEM,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAEH,OAAO,CAACwC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAGxC,OAAO,CAACyC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,EAGIH,MAAM,CAACb,QAAP,IAAmBc,OAAO,CAACd,QAA3B,GACG;AAAK,MAAA,SAAS,EAAEzB,OAAO,CAAC0C,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCJ,MAAM,CAACb,QAA1C,CADH,GAEG,IALP,EAMG;AAAQ,MAAA,SAAS,EAAEzB,OAAO,CAACwC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANH,EAOG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAGxC,OAAO,CAACyC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPH,EAQIH,MAAM,CAACR,MAAP,IAAiBS,OAAO,CAACT,MAAzB,GACG;AAAK,MAAA,SAAS,EAAE9B,OAAO,CAAC0C,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCJ,MAAM,CAACR,MAA1C,CADH,GAEG,IAVP,EAWI;AAAQ,MAAA,SAAS,EAAE9B,OAAO,CAACwC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXJ,EAYI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAGxC,OAAO,CAACyC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,EAaIH,MAAM,CAACP,KAAP,IAAgBQ,OAAO,CAACR,KAAxB,GACG;AAAK,MAAA,SAAS,EAAE/B,OAAO,CAAC0C,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCJ,MAAM,CAACP,KAA1C,CADH,GAEG,IAfP,EAkBG;AAAQ,MAAA,SAAS,EAAE/B,OAAO,CAACwC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAlBH,EAoBG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC,OAAzB;AAAkC,MAAA,SAAS,EAAGxC,OAAO,CAACyC,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBH,EAqBIH,MAAM,CAACH,KAAP,IAAgBI,OAAO,CAACJ,KAAxB,GAAgC;AAAK,MAAA,SAAS,EAAEnC,OAAO,CAAC0C,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCJ,MAAM,CAACH,KAAzC,CAAhC,GAAwF,IArB5F,EAsBG;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAEnC,OAAO,CAAC2C,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtBH,CAFN,CAbE,CADL,CADJ;AA8CH;;AAjF+B;;AAoFpC,MAAMC,eAAe,GAAGlC,KAAK,IAAI;AAC7B,SAAO;AACHmC,IAAAA,IAAI,EAAEnC,KAAK,CAACoC,aAAN,CAAoB7B,WADvB;AAEHE,IAAAA,KAAK,EAAET,KAAK,CAACoC,aAAN,CAAoBC,UAFxB;AAGHC,IAAAA,OAAO,EAAEtC,KAAK,CAACM,KAAN,CAAYgC;AAHlB,GAAP;AAKH,CAND;;AAQA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH9B,IAAAA,aAAa,EAAGP,SAAD,IAAeqC,QAAQ,CAAC7C,OAAO,CAAC8C,cAAR,CAAuBtC,SAAvB,CAAD;AADnC,GAAP;AAGH,CAJD;;AAMA,eAAeN,OAAO,CAACqC,eAAD,EAAkBK,kBAAlB,CAAP,CAA6C3C,gBAAgB,CAACG,WAAD,EAAcR,KAAd,CAA7D,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport classes from './ContactData.css';\r\n\r\nimport axios from './../../../axios-order';\r\nimport {Formik,Form,Field} from 'formik'   \r\nimport * as actions from './../../../store/actions/index'\r\nimport withErrorHandler from './../../../hoc/withErrorHandle/withErrorHandle';\r\nimport {connect} from 'react-redux'\r\nimport * as Yup from 'yup';\r\nclass ContactData extends Component {\r\n      state = {\r\n          orderForm : {}\r\n      }\r\n    orderHandler = (orderData,event) => {\r\n            \r\n         event.preventDefault()\r\n            const order = {\r\n                ingredients : this.props.ingredients,\r\n                price : this.props.price,\r\n                orderData: orderData\r\n \r\n            }\r\n            this.props.onOrderBurger(order);\r\n    }\r\n\r\n    render(){\r\n        const ContactSchema = Yup.object().shape({\r\n            yourname: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Username is required'),\r\n            street : Yup.string()\r\n            .max(100, 'Too long!')\r\n            .required('Password is required'),\r\n            phone : Yup.number()\r\n            .positive('')\r\n            .integer('')\r\n            .required('Phone number is required'),\r\n            email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Email is required')\r\n        })\r\n    \r\n    \r\n        return(\r\n            <div className = {classes.ContactData}>\r\n                 <Formik \r\n                initialValues = {{\r\n                    yourname: '',\r\n                    street: '',\r\n                    phone: '',\r\n                    email: ''\r\n                }}\r\n                 validationSchema = {ContactSchema}\r\n                 onSubmit = {\r\n                  values =>{\r\n                  (e) => this.orderHandler(values)\r\n                   }  }>\r\n            {({errors,touched}) => (\r\n               <div className = {classes.Form}>\r\n                   <h2>Contact Data</h2>\r\n                     <Form >\r\n                         <label className={classes.Label}>Name</label>\r\n                        <Field name=\"yourname\" className ={classes.Input} />\r\n                        {errors.yourname && touched.yourname ? (\r\n                            <div className={classes.Invalid} >{errors.yourname}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Street</label>\r\n                        <Field name=\"street\" className ={classes.Input} />\r\n                        {errors.street && touched.street ? (\r\n                            <div className={classes.Invalid} >{errors.street}</div>\r\n                        ) : null}\r\n                         <label  className={classes.Label}>Phone</label>\r\n                         <Field name=\"phone\" className ={classes.Input} />\r\n                        {errors.phone && touched.phone ? (\r\n                            <div className={classes.Invalid} >{errors.phone}</div>\r\n                        ) : null}\r\n                         \r\n                        \r\n                        <label  className={classes.Label}>Email</label>\r\n                      \r\n                        <Field name=\"email\" type=\"email\"  className ={classes.Input}/>\r\n                        {errors.email && touched.email ? <div className={classes.Invalid}>{errors.email}</div> : null}\r\n                        <button type=\"submit\" className={classes.Success}>ORDER</button>\r\n                    </Form>\r\n               </div> \r\n            )} \r\n            </Formik>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}