{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\components\\\\UI\\\\Form\\\\Input.js\";\nimport React, { Component } from 'react';\nimport classes from './Input.css';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nclass Input extends Component {\n  render() {\n    let test = {};\n    const SignupSchema = Yup.object().shape({\n      username: Yup.string().min(2, 'Too Short!').max(50, 'Too long!').required('Username is required'),\n      password: Yup.string().min(8, 'Too Short!').max(50, 'Too long!').required('Password is required'),\n      email: Yup.string().email('Invalid email').required('Email is required')\n    });\n    return React.createElement(Formik, {\n      initialValues: {\n        username: '',\n        password: '',\n        email: ''\n      },\n      validationSchema: SignupSchema,\n      onSubmit: values => {\n        test = values;\n        console.log(values);\n        console.log(test);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(\"div\", {\n      className: classes.Form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Sign up\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Username\"), React.createElement(Field, {\n      name: \"username\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), errors.username && touched.username ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, errors.username) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Field, {\n      name: \"password\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), errors.password && touched.password ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, errors.password) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Field, {\n      name: \"email\",\n      type: \"email\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), errors.email && touched.email ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, errors.email) : null, React.createElement(\"button\", {\n      type: \"submit\",\n      className: classes.Success,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"SUBMIT\"))));\n  }\n\n}\n\nexport default Input;","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\components\\UI\\Form\\Input.js"],"names":["React","Component","classes","Formik","Form","Field","Yup","Input","render","test","SignupSchema","object","shape","username","string","min","max","required","password","email","values","console","log","errors","touched","Label","Invalid","Success"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\r\nimport classes from './Input.css';\r\nimport {Formik,Form,Field} from 'formik'   \r\nimport * as Yup from 'yup';\r\nclass Input extends Component {\r\n    render(){\r\n        let test = {};\r\n        const SignupSchema = Yup.object().shape({\r\n            username: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Username is required'),\r\n            password: Yup.string()\r\n            .min(8, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Password is required'),\r\n            email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Email is required')\r\n        })\r\n        return(\r\n            <Formik \r\n                initialValues = {{\r\n                    username: '',\r\n                    password: '',\r\n                    email: ''\r\n                }}\r\n                 validationSchema = {SignupSchema}\r\n                 onSubmit = {values => {\r\n                     test=values;\r\n                     console.log(values);\r\n                     console.log(test)\r\n                 }}>\r\n            {({errors,touched}) => (\r\n               <div className = {classes.Form}>\r\n                   <h1>Sign up</h1>\r\n                     <Form >\r\n                         <label className={classes.Label}>Username</label>\r\n                        <Field name=\"username\" className ={classes.Input} />\r\n                        {errors.username && touched.username ? (\r\n                            <div className={classes.Invalid} >{errors.username}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Password</label>\r\n                        <Field name=\"password\" className ={classes.Input} />\r\n                        {errors.password && touched.password ? (\r\n                            <div className={classes.Invalid} >{errors.password}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Email</label>\r\n                        <Field name=\"email\" type=\"email\"  className ={classes.Input}/>\r\n                        {errors.email && touched.email ? <div className={classes.Invalid}>{errors.email}</div> : null}\r\n                        <button type=\"submit\" className={classes.Success}>SUBMIT</button>\r\n                    </Form>\r\n               </div> \r\n            )} \r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input"]},"metadata":{},"sourceType":"module"}