{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport * as type from './../constants/actionTypes';\nimport axios from './../../axios-order';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: type.PURCHASE_BURGER_SUCCESS,\n    orderID: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: type.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: type.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      console.log(response.data);\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: type.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: type.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: type.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: type.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json').then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push(_objectSpread({}, res.data[key], {\n          id: key\n        }));\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\store\\actions\\order.js"],"names":["type","axios","purchaseBurgerSuccess","id","orderData","PURCHASE_BURGER_SUCCESS","orderID","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","console","log","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","get","res","fetchedOrders","key","push","err"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,4BAAtB;AAEA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAIC,SAAJ,KAAkB;AACnD,SAAO;AACHJ,IAAAA,IAAI,EAAGA,IAAI,CAACK,uBADT;AAEHC,IAAAA,OAAO,EAAGH,EAFP;AAGHC,IAAAA,SAAS,EAAGA;AAHT,GAAP;AAKH,CANM;AAQP,OAAO,MAAMG,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAO;AACHR,IAAAA,IAAI,EAAEA,IAAI,CAACS,oBADR;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAMP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHV,IAAAA,IAAI,EAAGA,IAAI,CAACW;AADT,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAKR,SAAF,IAAiB;AAC3C,SAAOS,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAEH,mBAAmB,EAArB,CAAR;AACAT,IAAAA,KAAK,CAACa,IAAN,CAAY,cAAZ,EAA4BV,SAA5B,EACKW,IADL,CACWC,QAAQ,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAaF,QAAQ,CAACG,IAAtB;AACAN,MAAAA,QAAQ,CAAEX,qBAAqB,CAAEc,QAAQ,CAACG,IAAT,CAAcC,IAAhB,EAAsBhB,SAAtB,CAAvB,CAAR;AACH,KAJL,EAKKiB,KALL,CAKYb,KAAK,IAAI;AACbK,MAAAA,QAAQ,CAAEN,kBAAkB,CAAEC,KAAF,CAApB,CAAR;AACH,KAPL;AAQH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMc,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHtB,IAAAA,IAAI,EAAEA,IAAI,CAACuB;AADR,GAAP;AAGH,CAJM;AAKP,OAAO,MAAMC,kBAAkB,GAAKC,MAAF,IAAc;AAC5C,SAAO;AACHzB,IAAAA,IAAI,EAAEA,IAAI,CAAC0B,oBADR;AAEHD,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAKnB,KAAF,IAAa;AACxC,SAAO;AACHR,IAAAA,IAAI,EAAEA,IAAI,CAAC4B,iBADR;AAEHpB,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMqB,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACH7B,IAAAA,IAAI,EAAEA,IAAI,CAAC8B;AADR,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAOlB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACgB,gBAAgB,EAAjB,CAAR;AACA5B,IAAAA,KAAK,CAAC+B,GAAN,CAAW,cAAX,EACKjB,IADL,CACWkB,GAAG,IAAI;AACV,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAM,IAAIC,GAAV,IAAiBF,GAAG,CAACd,IAArB,EAA4B;AACxBe,QAAAA,aAAa,CAACE,IAAd,mBACOH,GAAG,CAACd,IAAJ,CAASgB,GAAT,CADP;AAEIhC,UAAAA,EAAE,EAAEgC;AAFR;AAIH;;AACDtB,MAAAA,QAAQ,CAACW,kBAAkB,CAACU,aAAD,CAAnB,CAAR;AACH,KAVL,EAWKb,KAXL,CAWYgB,GAAG,IAAI;AACXxB,MAAAA,QAAQ,CAACc,eAAe,CAACU,GAAD,CAAhB,CAAR;AACH,KAbL;AAcH,GAhBD;AAiBH,CAlBM","sourcesContent":["import * as type from './../constants/actionTypes';\r\n\r\nimport axios from './../../axios-order';\r\n\r\nexport const purchaseBurgerSuccess = (id,orderData) => {\r\n    return {\r\n        type : type.PURCHASE_BURGER_SUCCESS,\r\n        orderID : id,\r\n        orderData : orderData\r\n    }\r\n}\r\n\r\nexport const purchaseBurgerFail = (error) => {\r\n    return {\r\n        type: type.PURCHASE_BURGER_FAIL,\r\n        error: error\r\n    }\r\n}\r\nexport const purchaseBurgerStart = () => {\r\n    return {\r\n        type : type.PURCHASE_BURGER_START\r\n    }\r\n}\r\n\r\nexport const purchaseBurger = ( orderData ) => {\r\n    return dispatch => {\r\n        dispatch( purchaseBurgerStart() );\r\n        axios.post( '/orders.json', orderData )\r\n            .then( response => {\r\n                console.log( response.data );\r\n                dispatch( purchaseBurgerSuccess( response.data.name, orderData ) );\r\n            } )\r\n            .catch( error => {\r\n                dispatch( purchaseBurgerFail( error ) );\r\n            } );\r\n    };\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: type.PURCHASE_INIT\r\n    };\r\n};\r\nexport const fetchOrdersSuccess = ( orders ) => {\r\n    return {\r\n        type: type.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    };\r\n};\r\n\r\nexport const fetchOrdersFail = ( error ) => {\r\n    return {\r\n        type: type.FETCH_ORDERS_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const fetchOrdersStart = () => {\r\n    return {\r\n        type: type.FETCH_ORDERS_START\r\n    };\r\n};\r\n\r\nexport const fetchOrders = () => {\r\n    return dispatch => {\r\n        dispatch(fetchOrdersStart());\r\n        axios.get( '/orders.json' )\r\n            .then( res => {\r\n                const fetchedOrders = [];\r\n                for ( let key in res.data ) {\r\n                    fetchedOrders.push( {\r\n                        ...res.data[key],\r\n                        id: key\r\n                    } );\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchedOrders));\r\n            } )\r\n            .catch( err => {\r\n                dispatch(fetchOrdersFail(err));\r\n            } );\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}