{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\Signup\\\\Signup.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from './../../store/actions/index';\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.submitHandler = account => {\n      this.props.onAuth(account.username, account.password, account.email);\n    };\n  }\n\n  render() {\n    const SignupSchema = Yup.object().shape({\n      username: Yup.string().min(2, 'Too Short!').max(50, 'Too long!').required('Username is required'),\n      password: Yup.string().min(8, 'Too Short!').max(50, 'Too long!').required('Password is required'),\n      email: Yup.string().email('Invalid email').required('Email is required')\n    });\n    return React.createElement(Formik, {\n      initialValues: {\n        username: '',\n        password: '',\n        email: ''\n      },\n      validationSchema: SignupSchema,\n      onSubmit: values => {\n        submitHandler(values);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(\"div\", {\n      className: classes.To,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Form, {\n      className: classes.Form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Sign up\"), React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Username\"), React.createElement(Field, {\n      name: \"username\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), errors.username && touched.username ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, errors.username) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Field, {\n      name: \"password\",\n      type: \"password\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), errors.password && touched.password ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, errors.password) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Field, {\n      name: \"email\",\n      type: \"email\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), errors.email && touched.email ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, errors.email) : null, React.createElement(\"button\", {\n      type: \"submit\",\n      className: classes.Success,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"SUBMIT\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, password, email) => dispatch(actions.auth(username, password, email))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\Signup\\Signup.js"],"names":["React","Component","connect","actions","Signup","submitHandler","account","props","onAuth","username","password","email","render","SignupSchema","Yup","object","shape","string","min","max","required","values","errors","touched","classes","To","Form","Label","Input","Invalid","Success","mapStateToProps","state","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../../store/actions/index';\r\n\r\nclass Signup extends Component {\r\n    \r\n    submitHandler = (account) => {\r\n        this.props.onAuth(account.username,account.password,account.email);\r\n    }\r\n    render(){\r\n    \r\n        const SignupSchema = Yup.object().shape({\r\n            username: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Username is required'),\r\n            password: Yup.string()\r\n            .min(8, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Password is required'),\r\n            email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Email is required')\r\n        })\r\n        return(\r\n            <Formik \r\n                initialValues = {{\r\n                    username: '',\r\n                    password: '',\r\n                    email: ''\r\n                }}\r\n                 validationSchema = {SignupSchema}\r\n                 onSubmit = {values => {\r\n                    submitHandler(values)\r\n                 }}>\r\n            {({errors,touched}) => (\r\n               <div className = {classes.To}>\r\n                   \r\n                     <Form className = {classes.Form} >\r\n                     <h2>Sign up</h2>\r\n                         <label className={classes.Label}>Username</label>\r\n                        <Field name=\"username\" className ={classes.Input} />\r\n                        {errors.username && touched.username ? (\r\n                            <div className={classes.Invalid} >{errors.username}</div>\r\n                        ) : null}\r\n                         <label  className={classes.Label}>Password</label>\r\n                        <Field name=\"password\" type=\"password\"className ={classes.Input} />\r\n                        {errors.password && touched.password ? (\r\n                            <div className={classes.Invalid} >{errors.password}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Email</label>\r\n                        <Field name=\"email\" type=\"email\"  className ={classes.Input}/>\r\n                        {errors.email && touched.email ? <div className={classes.Invalid}>{errors.email}</div> : null}\r\n                        <button type=\"submit\" className={classes.Success}>SUBMIT</button>\r\n                    </Form>\r\n               </div> \r\n            )} \r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state  => {\r\n    return {\r\n      \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps  = dispatch  => {\r\n    return {\r\n        onAuth : (username,password,email) => dispatch(actions.auth(username,password,email))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Signup);"]},"metadata":{},"sourceType":"module"}