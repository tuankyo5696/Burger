{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\Checkout\\\\Contact-data\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport classes from './ContactData.css';\nimport Button from './../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from './../../../axios-order';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {}\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      console.log(this.props.ingredients);\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price //orderData: \n\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => this.setState({\n        loading: false\n      }));\n    };\n  }\n\n  render() {\n    const SignupSchema = Yup.object().shape({\n      username: Yup.string().min(2, 'Too Short!').max(50, 'Too long!').required('Username is required'),\n      password: Yup.string().min(8, 'Too Short!').max(50, 'Too long!').required('Password is required'),\n      email: Yup.string().email('Invalid email').required('Email is required')\n    });\n    let form = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: classes.input,\n      name: \"name\",\n      placeholder: \"Yourname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"email\",\n      className: classes.input,\n      name: \"email\",\n      placeholder: \"Youremail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: classes.input,\n      name: \"text\",\n      placeholder: \"Street\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: classes.input,\n      name: \"text\",\n      placeholder: \"PostalCode\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        username: '',\n        password: '',\n        email: ''\n      },\n      validationSchema: SignupSchema,\n      onSubmit: values => {\n        test = values;\n        console.log(values);\n        console.log(test);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(\"div\", {\n      className: classes.Form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Contact Data\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Username\"), React.createElement(Field, {\n      name: \"username\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), errors.username && touched.username ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, errors.username) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Field, {\n      name: \"password\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), errors.password && touched.password ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, errors.password) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Field, {\n      name: \"email\",\n      type: \"email\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), errors.email && touched.email ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, errors.email) : null, React.createElement(\"button\", {\n      type: \"submit\",\n      className: classes.Success,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"SUBMIT\")))));\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\Checkout\\Contact-data\\ContactData.js"],"names":["React","Component","classes","Button","Spinner","axios","Formik","Form","Field","Yup","ContactData","state","orderForm","orderHandler","event","preventDefault","console","log","props","ingredients","setState","loading","order","price","post","then","response","history","push","catch","error","render","SignupSchema","object","shape","username","string","min","max","required","password","email","form","input","values","test","errors","touched","Label","Input","Invalid","Success"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport classes from './ContactData.css';\r\nimport Button from './../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport axios from './../../../axios-order';\r\nimport {Formik,Form,Field} from 'formik'   \r\nimport * as Yup from 'yup';\r\nclass ContactData extends Component {\r\n        state = {\r\n            orderForm : {}\r\n        }\r\n    orderHandler = (event) => {\r\n            event.preventDefault();\r\n            console.log(this.props.ingredients);\r\n            this.setState({\r\n                loading: true\r\n            })\r\n                const order = {\r\n                ingredients : this.props.ingredients,\r\n                price : this.props.price,\r\n                //orderData: \r\n            }\r\n            axios.post('/orders.json',order)\r\n            .then(response => {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => this.setState({loading : false}))\r\n    }\r\n\r\n    render(){\r\n        const SignupSchema = Yup.object().shape({\r\n            username: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Username is required'),\r\n            password: Yup.string()\r\n            .min(8, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Password is required'),\r\n            email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Email is required')\r\n        })\r\n        let form = (\r\n            <form>\r\n            <input type=\"text\" className = {classes.input} name=\"name\" placeholder=\"Yourname\"/>\r\n            <input type=\"email\" className = {classes.input} name=\"email\" placeholder=\"Youremail\"/>\r\n            <input type =\"text\" className = {classes.input}name = \"text\" placeholder =\"Street\"/>\r\n            <input type =\"text\" className = {classes.input}name = \"text\" placeholder =\"PostalCode\"/>\r\n            <Button btnType=\"Success\" clicked= {this.orderHandler} >ORDER</Button>\r\n            </form>\r\n        )\r\n        if(this.state.loading){\r\n            form = <Spinner/>\r\n        }\r\n        return(\r\n            <div className = {classes.ContactData}>\r\n                 <Formik \r\n                initialValues = {{\r\n                    username: '',\r\n                    password: '',\r\n                    email: ''\r\n                }}\r\n                 validationSchema = {SignupSchema}\r\n                 onSubmit = {values => {\r\n                     test=values;\r\n                     console.log(values);\r\n                     console.log(test)\r\n                 }}>\r\n            {({errors,touched}) => (\r\n               <div className = {classes.Form}>\r\n                   <h2>Contact Data</h2>\r\n                     <Form >\r\n                         <label className={classes.Label}>Username</label>\r\n                        <Field name=\"username\" className ={classes.Input} />\r\n                        {errors.username && touched.username ? (\r\n                            <div className={classes.Invalid} >{errors.username}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Password</label>\r\n                        <Field name=\"password\" className ={classes.Input} />\r\n                        {errors.password && touched.password ? (\r\n                            <div className={classes.Invalid} >{errors.password}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Email</label>\r\n                        <Field name=\"email\" type=\"email\"  className ={classes.Input}/>\r\n                        {errors.email && touched.email ? <div className={classes.Invalid}>{errors.email}</div> : null}\r\n                        <button type=\"submit\" className={classes.Success}>SUBMIT</button>\r\n                    </Form>\r\n               </div> \r\n            )} \r\n            </Formik>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactData"]},"metadata":{},"sourceType":"module"}