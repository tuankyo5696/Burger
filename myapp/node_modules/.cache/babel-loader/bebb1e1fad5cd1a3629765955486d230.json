{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\BurgerBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Burger from './../../components/Burger/Burger';\nimport BuildControls from './../../components/Burger/BuildControls/BuildControls';\nimport Modal from './../../components/UI/Modal/Modal';\nimport OrderSummary from './../../components/Burger/OrderSummary/OrderSummary';\nimport axios from './../../axios-order';\nimport Spinner from './../../components/UI/Spinner/Spinner';\nimport withErrorHandler from './../../hoc/withErrorHandle/withErrorHandle';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: null,\n      totalPrice: 4,\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      // spinner,\n      error: null\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(igKey => {\n        return ingredients[igKey];\n      }).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updateCount = oldCount + 1;\n\n      const updatedIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatedIngredients[type] = updateCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        ingredients: updatedIngredients,\n        totalPrice: newPrice\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n\n      const updatedIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      const queryParams = [];\n\n      for (let i in this.state.ingredients) {\n        queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n      } // queryParams.push('price=' + this.state.totalPrice);\n\n\n      const queryString = queryParams.join('&');\n      this.props.history.push({\n        pathname: 'checkout',\n        search: '?' + queryString\n      }); // go to page checkout\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/ingredients.json').then(response => {\n      this.setState({\n        ingredients: response.data\n      });\n    }).catch(error => this.setState({\n      error: error\n    }));\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.state.ingredients);\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" ingredients can't be loaded\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    });\n\n    if (this.state.ingredients) {\n      burger = React.createElement(React.Fragment, null, React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        ingredientAdded: this.addIngredientHandler,\n        ingredientRemoved: this.removeIngredientHandler,\n        disabled: disabledInfo,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        price: this.state.totalPrice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice,\n        purchaseCancelled: this.purchaseCancelHandler,\n        puschaseContinued: this.purchaseContinueHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n\n      if (this.state.loading) {\n        orderSummary = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\BurgerBuilder\\BurgerBuilder.js"],"names":["React","Component","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","loading","error","updatePurchaseState","sum","Object","keys","map","igKey","reduce","el","setState","addIngredientHandler","type","oldCount","updateCount","updatedIngredients","priceAddition","oldPrice","newPrice","removeIngredientHandler","updatedCount","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","queryParams","i","push","encodeURIComponent","queryString","join","props","history","pathname","search","componentDidMount","get","then","response","data","catch","render","disabledInfo","key","orderSummary","burger"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\n\r\n\r\nimport Burger from './../../components/Burger/Burger';\r\nimport BuildControls from './../../components/Burger/BuildControls/BuildControls';\r\nimport Modal from './../../components/UI/Modal/Modal';\r\nimport OrderSummary from './../../components/Burger/OrderSummary/OrderSummary';\r\nimport axios from './../../axios-order';\r\nimport Spinner from './../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from './../../hoc/withErrorHandle/withErrorHandle';\r\nconst INGREDIENT_PRICES ={\r\n    salad : 0.5,\r\n    cheese: 0.4,\r\n    meat: 1.3,\r\n    bacon: 0.7\r\n};\r\n\r\n\r\nclass BurgerBuilder extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state ={...}\r\n    // }\r\n    state = {\r\n            ingredients : null,\r\n            totalPrice  : 4,\r\n            purchasable: false,\r\n            purchasing: false,\r\n            loading :   false ,// spinner,\r\n            error : null\r\n    }\r\n    componentDidMount  () {\r\n        axios.get('/ingredients.json')\r\n        .then(response => {this.setState({\r\n            ingredients : response.data\r\n        });\r\n        })\r\n        .catch(error => this.setState({\r\n            error: error\r\n        })) ;\r\n    }\r\n    updatePurchaseState = (ingredients) =>{\r\n        const sum = Object.keys(ingredients)\r\n            .map(igKey  =>{\r\n                return ingredients[igKey];    \r\n            })\r\n            .reduce((sum,el)=>{\r\n                return sum + el;\r\n            },0)\r\n        this.setState({purchasable : sum>0})\r\n    }\r\n    addIngredientHandler = (type) =>{\r\n        const oldCount = this.state.ingredients[type];\r\n        const updateCount = oldCount +1;\r\n        const updatedIngredients = {\r\n            ...this.state.ingredients\r\n        };\r\n        updatedIngredients[type] = updateCount;\r\n        const priceAddition = INGREDIENT_PRICES[type];\r\n        const oldPrice = this.state.totalPrice;\r\n        const newPrice = oldPrice + priceAddition;\r\n        this.setState({\r\n            ingredients : updatedIngredients,\r\n            totalPrice : newPrice\r\n        });\r\n        this.updatePurchaseState(updatedIngredients);\r\n    }\r\n    removeIngredientHandler = (type) => {\r\n        const oldCount = this.state.ingredients[type];\r\n        if ( oldCount <= 0 ) {\r\n            return;\r\n        }\r\n        const updatedCount = oldCount - 1;\r\n        const updatedIngredients = {\r\n            ...this.state.ingredients\r\n        };\r\n        updatedIngredients[type] = updatedCount;\r\n        const priceDeduction = INGREDIENT_PRICES[type];\r\n        const oldPrice = this.state.totalPrice;\r\n        const newPrice = oldPrice - priceDeduction;\r\n        this.setState( { totalPrice: newPrice, ingredients: updatedIngredients } );\r\n    }\r\n    purchaseHandler =() => {\r\n        this.setState({purchasing: true});\r\n        \r\n    }\r\n    purchaseCancelHandler = () =>{\r\n        this.setState({purchasing:false})\r\n    }\r\n    purchaseContinueHandler = () =>{\r\n        const queryParams = [];\r\n        for(let i in this.state.ingredients){\r\n            queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\r\n        }\r\n       // queryParams.push('price=' + this.state.totalPrice);\r\n        const queryString = queryParams.join('&');\r\n        this.props.history.push({\r\n            pathname : 'checkout',\r\n            search : '?' + queryString\r\n        }); // go to page checkout\r\n    }\r\n    render(){\r\n        const disabledInfo = {\r\n            ...this.state.ingredients\r\n        }\r\n        for(let key in disabledInfo){\r\n            disabledInfo[key]= disabledInfo[key] <=0\r\n           \r\n        }\r\n        \r\n     \r\n        let orderSummary = null;\r\n        let burger = this.state.error ? <p> ingredients can't be loaded</p> : <Spinner/>\r\n\r\n        if(this.state.ingredients){\r\n          \r\n            burger = ( <>\r\n               <Burger ingredients = {this.state.ingredients}/>\r\n               <BuildControls \r\n                   ingredientAdded = {this.addIngredientHandler}\r\n                   ingredientRemoved= {this.removeIngredientHandler}\r\n                   disabled = {disabledInfo}\r\n                   purchasable ={this.state.purchasable}\r\n                   ordered = {this.purchaseHandler}\r\n                   price = {this.state.totalPrice}\r\n               />\r\n                </> \r\n                );\r\n               orderSummary =  <OrderSummary ingredients={this.state.ingredients} \r\n                                            price ={this.state.totalPrice}\r\n                                            purchaseCancelled ={this.purchaseCancelHandler}\r\n                                            puschaseContinued = {this.purchaseContinueHandler}\r\n                            />\r\n                if (this.state.loading){\r\n                    orderSummary = <Spinner/>\r\n                }               \r\n        }\r\n        \r\n        return (\r\n            <>\r\n                <Modal show = {this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\r\n                   {orderSummary}\r\n                </Modal>\r\n                {burger}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withErrorHandler(BurgerBuilder,axios);"]},"metadata":{},"sourceType":"module"}