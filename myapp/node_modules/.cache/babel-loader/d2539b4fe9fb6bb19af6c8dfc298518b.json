{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\BurgerBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Burger from './../../components/Burger/Burger';\nimport BuildControls from './../../components/Burger/BuildControls/BuildControls';\nimport Modal from './../../components/UI/Modal/Modal';\nimport OrderSummary from './../../components/Burger/OrderSummary/OrderSummary';\nimport axios from './../../axios-order';\nimport Spinner from './../../components/UI/Spinner/Spinner';\nimport withErrorHandler from './../../hoc/withErrorHandle/withErrorHandle';\nimport * as actions from './../../store/actions/index';\nimport * as actionTypes from './../../store/constants/actionTypes';\nimport { connect } from 'react-redux';\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      // spinner,\n      error: null\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(igKey => {\n        return ingredients[igKey];\n      }).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      const queryParams = [];\n\n      for (let i in this.state.ingredients) {\n        queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n      }\n\n      queryParams.push('price=' + this.state.totalPrice);\n      const queryString = queryParams.join('&');\n      this.props.history.push({\n        pathname: 'checkout',\n        search: '?' + queryString\n      }); // go to page checkout\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/ingredients.json').then(response => {\n      this.setState({\n        ingredients: response.data\n      });\n    }).catch(error => this.setState({\n      error: error\n    }));\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.props.ingredients);\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \" ingredients can't be loaded\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n\n    if (this.state.ingredients) {\n      burger = React.createElement(React.Fragment, null, React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        ingredientAdded: this.props.onIngredientAdded,\n        ingredientRemoved: this.props.onIngredientRemoved,\n        disabled: disabledInfo,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        price: this.state.totalPrice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice,\n        purchaseCancelled: this.purchaseCancelHandler,\n        puschaseContinued: this.purchaseContinueHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      });\n\n      if (this.state.loading) {\n        orderSummary = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onIngredientAdded: ingName => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: ingName\n    }),\n    onIngredientRemoved: ingName => dispatch({\n      type: actionTypes.REMOVE_INGREDIENT,\n      ingredientName: ingName\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\BurgerBuilder\\BurgerBuilder.js"],"names":["React","Component","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","actions","actionTypes","connect","BurgerBuilder","state","purchasable","purchasing","loading","error","updatePurchaseState","ingredients","sum","Object","keys","map","igKey","reduce","el","setState","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","queryParams","i","push","encodeURIComponent","totalPrice","queryString","join","props","history","pathname","search","componentDidMount","get","then","response","data","catch","render","disabledInfo","key","orderSummary","burger","onIngredientAdded","onIngredientRemoved","mapStateToProps","ings","price","mapDispatchToProps","dispatch","ingName","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\n\r\n\r\nimport Burger from './../../components/Burger/Burger';\r\nimport BuildControls from './../../components/Burger/BuildControls/BuildControls';\r\nimport Modal from './../../components/UI/Modal/Modal';\r\nimport OrderSummary from './../../components/Burger/OrderSummary/OrderSummary';\r\nimport axios from './../../axios-order';\r\nimport Spinner from './../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from './../../hoc/withErrorHandle/withErrorHandle';\r\nimport * as actions from './../../store/actions/index';\r\nimport * as actionTypes from './../../store/constants/actionTypes';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass BurgerBuilder extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state ={...}\r\n    // }\r\n    state = {\r\n            purchasable: false,\r\n            purchasing: false,\r\n            loading :   false ,// spinner,\r\n            error : null\r\n    }\r\n    componentDidMount  () {\r\n        axios.get('/ingredients.json')\r\n        .then(response => {this.setState({\r\n            ingredients : response.data\r\n        });\r\n        })\r\n        .catch(error => this.setState({\r\n            error: error\r\n        })) ;\r\n    }\r\n    updatePurchaseState = (ingredients) =>{\r\n        const sum = Object.keys(ingredients)\r\n            .map(igKey  =>{\r\n                return ingredients[igKey];    \r\n            })\r\n            .reduce((sum,el)=>{\r\n                return sum + el;\r\n            },0)\r\n        this.setState({purchasable : sum>0})\r\n    }\r\n    \r\n    purchaseHandler =() => {\r\n        this.setState({purchasing: true});\r\n        \r\n    }\r\n    purchaseCancelHandler = () =>{\r\n        this.setState({purchasing:false})\r\n    }\r\n    purchaseContinueHandler = () =>{\r\n        const queryParams = [];\r\n        for(let i in this.state.ingredients){\r\n            queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\r\n        }\r\n        queryParams.push('price=' + this.state.totalPrice);\r\n        const queryString = queryParams.join('&');\r\n        this.props.history.push({\r\n            pathname : 'checkout',\r\n            search : '?' + queryString\r\n        }); // go to page checkout\r\n    }\r\n    render(){\r\n        const disabledInfo = {\r\n            ...this.props.ingredients\r\n        }\r\n        for(let key in disabledInfo){\r\n            disabledInfo[key]= disabledInfo[key] <=0\r\n           \r\n        }\r\n        \r\n     \r\n        let orderSummary = null;\r\n        let burger = this.state.error ? <p> ingredients can't be loaded</p> : <Spinner/>\r\n\r\n        if(this.state.ingredients){\r\n          \r\n            burger = ( <>\r\n               <Burger ingredients = {this.state.ingredients}/>\r\n               <BuildControls \r\n                   ingredientAdded = {this.props.onIngredientAdded}\r\n                   ingredientRemoved= {this.props.onIngredientRemoved}\r\n                   disabled = {disabledInfo}\r\n                   purchasable ={this.state.purchasable}\r\n                   ordered = {this.purchaseHandler}\r\n                   price = {this.state.totalPrice}\r\n               />\r\n                </> \r\n                );\r\n               orderSummary =  <OrderSummary ingredients={this.state.ingredients} \r\n                                            price ={this.state.totalPrice}\r\n                                            purchaseCancelled ={this.purchaseCancelHandler}\r\n                                            puschaseContinued = {this.purchaseContinueHandler}\r\n                            />\r\n                if (this.state.loading){\r\n                    orderSummary = <Spinner/>\r\n                }               \r\n        }\r\n        \r\n        return (\r\n            <>\r\n                <Modal show = {this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\r\n                   {orderSummary}\r\n                </Modal>\r\n                {burger}\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings : state.ingredients,\r\n        price : state.totalPrice\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch,props) =>{\r\n    return {\r\n        onIngredientAdded : (ingName) => dispatch({type: actionTypes.ADD_INGREDIENT, ingredientName: ingName}),\r\n        onIngredientRemoved: (ingName) => dispatch({type: actionTypes.REMOVE_INGREDIENT, ingredientName: ingName})\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps) (withErrorHandler(BurgerBuilder,axios));"]},"metadata":{},"sourceType":"module"}