{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\Checkout\\\\Contact-data\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport classes from './ContactData.css';\nimport Button from './../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from './../../../axios-order';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {}\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      console.log(this.props.ingredients);\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price //orderData: \n\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => this.setState({\n        loading: false\n      }));\n    };\n  }\n\n  render() {\n    const SignupSchema = Yup.object().shape({\n      yourname: Yup.string().min(2, 'Too Short!').max(50, 'Too long!').required('Username is required'),\n      street: Yup.string().max(100, 'Too long!').required('Password is required'),\n      phone: Yup.string().max(11, 'Too long!').required('Phone number is required'),\n      email: Yup.string().email('Invalid email').required('Email is required')\n    });\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        yourname: '',\n        street: '',\n        phone: '',\n        email: ''\n      },\n      validationSchema: SignupSchema,\n      onSubmit: values => {\n        this.setState({\n          orderForm: values\n        });\n        console.log(this.state.orderForm);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(\"div\", {\n      className: classes.Form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Contact Data\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Field, {\n      name: \"yourname\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), errors.yourname && touched.yourname ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, errors.yourname) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Street\"), React.createElement(Field, {\n      name: \"street\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), errors.street && touched.street ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, errors.street) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Phone\"), React.createElement(Field, {\n      name: \"phone\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), errors.phone && touched.phone ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, errors.phone) : null, React.createElement(\"label\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Field, {\n      name: \"email\",\n      type: \"email\",\n      className: classes.Input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), errors.email && touched.email ? React.createElement(\"div\", {\n      className: classes.Invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, errors.email) : null, React.createElement(\"button\", {\n      type: \"submit\",\n      className: classes.Success,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"ORDER\")))));\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\Checkout\\Contact-data\\ContactData.js"],"names":["React","Component","classes","Button","Spinner","axios","Formik","Form","Field","Yup","ContactData","state","orderForm","orderHandler","event","preventDefault","console","log","props","ingredients","setState","loading","order","price","post","then","response","history","push","catch","error","render","SignupSchema","object","shape","yourname","string","min","max","required","street","phone","email","form","values","errors","touched","Label","Input","Invalid","Success"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport classes from './ContactData.css';\r\nimport Button from './../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport axios from './../../../axios-order';\r\nimport {Formik,Form,Field} from 'formik'   \r\nimport * as Yup from 'yup';\r\nclass ContactData extends Component {\r\n        state = {\r\n            orderForm : {}\r\n        }\r\n    orderHandler = (event) => {\r\n            event.preventDefault();\r\n            console.log(this.props.ingredients);\r\n            this.setState({\r\n                loading: true\r\n            })\r\n                const order = {\r\n                ingredients : this.props.ingredients,\r\n                price : this.props.price,\r\n                //orderData: \r\n            }\r\n            axios.post('/orders.json',order)\r\n            .then(response => {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => this.setState({loading : false}))\r\n    }\r\n\r\n    render(){\r\n        const SignupSchema = Yup.object().shape({\r\n            yourname: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(50, 'Too long!')\r\n            .required('Username is required'),\r\n            street : Yup.string()\r\n            .max(100, 'Too long!')\r\n            .required('Password is required'),\r\n            phone : Yup.string()\r\n            .max(11,'Too long!')\r\n            .required('Phone number is required'),\r\n            email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Email is required')\r\n        })\r\n    \r\n        if(this.state.loading){\r\n            form = <Spinner/>\r\n        }\r\n        return(\r\n            <div className = {classes.ContactData}>\r\n                 <Formik \r\n                initialValues = {{\r\n                    yourname: '',\r\n                    street: '',\r\n                    phone: '',\r\n                    email: ''\r\n                }}\r\n                 validationSchema = {SignupSchema}\r\n                 onSubmit = {values => {\r\n                     this.setState({\r\n                         orderForm : values\r\n                     })\r\n                     console.log(this.state.orderForm);\r\n                 }}>\r\n            {({errors,touched}) => (\r\n               <div className = {classes.Form}>\r\n                   <h2>Contact Data</h2>\r\n                     <Form >\r\n                         <label className={classes.Label}>Name</label>\r\n                        <Field name=\"yourname\" className ={classes.Input} />\r\n                        {errors.yourname && touched.yourname ? (\r\n                            <div className={classes.Invalid} >{errors.yourname}</div>\r\n                        ) : null}\r\n                        <label  className={classes.Label}>Street</label>\r\n                        <Field name=\"street\" className ={classes.Input} />\r\n                        {errors.street && touched.street ? (\r\n                            <div className={classes.Invalid} >{errors.street}</div>\r\n                        ) : null}\r\n                         <label  className={classes.Label}>Phone</label>\r\n                         <Field name=\"phone\" className ={classes.Input} />\r\n                        {errors.phone && touched.phone ? (\r\n                            <div className={classes.Invalid} >{errors.phone}</div>\r\n                        ) : null}\r\n                         \r\n                        \r\n                        <label  className={classes.Label}>Email</label>\r\n                      \r\n                        <Field name=\"email\" type=\"email\"  className ={classes.Input}/>\r\n                        {errors.email && touched.email ? <div className={classes.Invalid}>{errors.email}</div> : null}\r\n                        <button type=\"submit\" className={classes.Success}>ORDER</button>\r\n                    </Form>\r\n               </div> \r\n            )} \r\n            </Formik>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactData"]},"metadata":{},"sourceType":"module"}