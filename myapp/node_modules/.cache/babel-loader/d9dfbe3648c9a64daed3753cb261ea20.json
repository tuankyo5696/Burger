{"ast":null,"code":"!function (root, factory) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = factory() : \"function\" == typeof define && define.amd ? define([], factory) : \"object\" == typeof exports ? exports.ReactImageLightbox = factory() : root.ReactImageLightbox = factory();\n}(\"undefined\" != typeof self ? self : this, function () {\n  /******/\n  return function (modules) {\n    // webpackBootstrap\n\n    /******/\n    // The module cache\n\n    /******/\n    var installedModules = {};\n    /******/\n\n    /******/\n    // The require function\n\n    /******/\n\n    function __webpack_require__(moduleId) {\n      /******/\n\n      /******/\n      // Check if module is in cache\n\n      /******/\n      if (installedModules[moduleId])\n        /******/\n        return installedModules[moduleId].exports;\n      /******/\n\n      /******/\n      // Create a new module (and put it into the cache)\n\n      /******/\n\n      var module = installedModules[moduleId] = {\n        /******/\n        i: moduleId,\n\n        /******/\n        l: !1,\n\n        /******/\n        exports: {}\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // Execute the module function\n\n      /******/\n\n      /******/\n\n      /******/\n      // Return the exports of the module\n\n      /******/\n\n      return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__),\n      /******/\n\n      /******/\n      // Flag the module as loaded\n\n      /******/\n      module.l = !0, module.exports;\n      /******/\n    }\n    /******/\n\n    /******/\n\n    /******/\n    // expose the modules object (__webpack_modules__)\n\n    /******/\n\n    /******/\n\n    /******/\n\n    /******/\n    // Load entry module and return exports\n\n    /******/\n\n\n    return __webpack_require__.m = modules,\n    /******/\n\n    /******/\n    // expose the module cache\n\n    /******/\n    __webpack_require__.c = installedModules,\n    /******/\n\n    /******/\n    // define getter function for harmony exports\n\n    /******/\n    __webpack_require__.d = function (exports, name, getter) {\n      /******/\n      __webpack_require__.o(exports, name) ||\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: !0,\n        get: getter\n      })\n      /******/\n      ;\n    },\n    /******/\n\n    /******/\n    // define __esModule on exports\n\n    /******/\n    __webpack_require__.r = function (exports) {\n      /******/\n      \"undefined\" != typeof Symbol && Symbol.toStringTag &&\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: \"Module\"\n      })\n      /******/\n      , Object.defineProperty(exports, \"__esModule\", {\n        value: !0\n      });\n    },\n    /******/\n\n    /******/\n    // create a fake namespace object\n\n    /******/\n    // mode & 1: value is a module id, require it\n\n    /******/\n    // mode & 2: merge all properties of value into the ns\n\n    /******/\n    // mode & 4: return value when already ns object\n\n    /******/\n    // mode & 8|1: behave like require\n\n    /******/\n    __webpack_require__.t = function (value, mode) {\n      /******/\n      if (\n      /******/\n      1 & mode && (value = __webpack_require__(value)), 8 & mode) return value;\n      /******/\n\n      if (4 & mode && \"object\" == typeof value && value && value.__esModule) return value;\n      /******/\n\n      var ns = Object.create(null);\n      /******/\n\n      /******/\n\n      if (__webpack_require__.r(ns),\n      /******/\n      Object.defineProperty(ns, \"default\", {\n        enumerable: !0,\n        value: value\n      }), 2 & mode && \"string\" != typeof value) for (var key in value) {\n        __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n      }\n      /******/\n\n      return ns;\n      /******/\n    },\n    /******/\n\n    /******/\n    // getDefaultExport function for compatibility with non-harmony modules\n\n    /******/\n    __webpack_require__.n = function (module) {\n      /******/\n      var getter = module && module.__esModule ?\n      /******/\n      function () {\n        return module.default;\n      } :\n      /******/\n      function () {\n        return module;\n      };\n      /******/\n\n      /******/\n\n      return __webpack_require__.d(getter, \"a\", getter), getter;\n      /******/\n    },\n    /******/\n\n    /******/\n    // Object.prototype.hasOwnProperty.call\n\n    /******/\n    __webpack_require__.o = function (object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    },\n    /******/\n\n    /******/\n    // __webpack_public_path__\n\n    /******/\n    __webpack_require__.p = \"\", __webpack_require__(__webpack_require__.s = 1);\n    /******/\n  }\n  /************************************************************************/\n\n  /******/\n  ([\n  /* 0 */\n\n  /***/\n  function (module, exports) {\n    var g; // This works in non-strict mode\n\n    g = function () {\n      return this;\n    }();\n\n    try {\n      // This works if eval is allowed (see CSP)\n      g = g || Function(\"return this\")() || (0, eval)(\"this\");\n    } catch (e) {\n      // This works if the window reference is available\n      \"object\" == typeof window && (g = window);\n    } // g can still be undefined, but nothing to do about it...\n    // We return undefined, instead of nothing here, so it's\n    // easier to handle this case. if(!global) { ...}\n\n\n    module.exports = g;\n  },\n  /* 1 */\n\n  /***/\n  function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: !0\n    });\n\n    var obj,\n        _lightboxReact = __webpack_require__(2),\n        _lightboxReact2 = (obj = _lightboxReact) && obj.__esModule ? obj : {\n      default: obj\n    };\n\n    exports.default = _lightboxReact2.default;\n  },\n  /* 2 */\n\n  /***/\n  function (module, exports, __webpack_require__) {\n    \"use strict\";\n    /* WEBPACK VAR INJECTION */\n\n    /* WEBPACK VAR INJECTION */\n\n    (function (global) {\n      Object.defineProperty(exports, \"__esModule\", {\n        value: !0\n      });\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);\n          }\n        }\n\n        return target;\n      },\n          _slicedToArray = function () {\n        return function (arr, i) {\n          if (Array.isArray(arr)) return arr;\n          if (Symbol.iterator in Object(arr)) return function (arr, i) {\n            var _arr = [],\n                _n = !0,\n                _d = !1,\n                _e = void 0;\n\n            try {\n              for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i || _arr.length !== i); _n = !0) {\n                ;\n              }\n            } catch (err) {\n              _d = !0, _e = err;\n            } finally {\n              try {\n                !_n && _i.return && _i.return();\n              } finally {\n                if (_d) throw _e;\n              }\n            }\n\n            return _arr;\n          }(arr, i);\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        };\n      }(),\n          _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, \"value\" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;\n        };\n      }(),\n          _react = __webpack_require__(3),\n          _react2 = _interopRequireDefault(_react),\n          _propTypes2 = _interopRequireDefault(__webpack_require__(4)),\n          _reactModal2 = _interopRequireDefault(__webpack_require__(5)),\n          _isReact2 = _interopRequireDefault(__webpack_require__(6)),\n          _util = __webpack_require__(7),\n          _constant = __webpack_require__(8);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        }\n\n        return Array.from(arr);\n      }\n\n      function _defineProperty(obj, key, value) {\n        return key in obj ? Object.defineProperty(obj, key, {\n          value: value,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : obj[key] = value, obj;\n      }\n\n      __webpack_require__(9);\n\n      var ReactImageLightbox = function (_Component) {\n        function ReactImageLightbox(props) {\n          !function (instance, Constructor) {\n            if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n          }(this, ReactImageLightbox);\n\n          var _this = function (self, call) {\n            if (!self) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            return !call || \"object\" != typeof call && \"function\" != typeof call ? self : call;\n          }(this, (ReactImageLightbox.__proto__ || Object.getPrototypeOf(ReactImageLightbox)).call(this, props));\n\n          return _this.state = {\n            //-----------------------------\n            // Animation\n            //-----------------------------\n            // Lightbox is closing\n            // When Lightbox is mounted, if animation is enabled it will open with the reverse of the closing animation\n            isClosing: !props.animationDisabled,\n            // Component parts should animate (e.g., when images are moving, or image is being zoomed)\n            shouldAnimate: !1,\n            //-----------------------------\n            // Zoom settings\n            //-----------------------------\n            // Zoom level of image\n            zoomLevel: _constant.MIN_ZOOM_LEVEL,\n            //-----------------------------\n            // Image position settings\n            //-----------------------------\n            // Horizontal offset from center\n            offsetX: 0,\n            // Vertical offset from center\n            offsetY: 0,\n            // image load error for srcType\n            loadErrorStatus: {}\n          }, _this.closeIfClickInner = _this.closeIfClickInner.bind(_this), _this.handleImageDoubleClick = _this.handleImageDoubleClick.bind(_this), _this.handleImageMouseWheel = _this.handleImageMouseWheel.bind(_this), _this.handleKeyInput = _this.handleKeyInput.bind(_this), _this.handleMouseUp = _this.handleMouseUp.bind(_this), _this.handleMouseDown = _this.handleMouseDown.bind(_this), _this.handleMouseMove = _this.handleMouseMove.bind(_this), _this.handleOuterMousewheel = _this.handleOuterMousewheel.bind(_this), _this.handleTouchStart = _this.handleTouchStart.bind(_this), _this.handleTouchMove = _this.handleTouchMove.bind(_this), _this.handleTouchEnd = _this.handleTouchEnd.bind(_this), _this.handlePointerEvent = _this.handlePointerEvent.bind(_this), _this.handleCaptionMousewheel = _this.handleCaptionMousewheel.bind(_this), _this.handleWindowResize = _this.handleWindowResize.bind(_this), _this.handleZoomInButtonClick = _this.handleZoomInButtonClick.bind(_this), _this.handleZoomOutButtonClick = _this.handleZoomOutButtonClick.bind(_this), _this.requestClose = _this.requestClose.bind(_this), _this.requestMoveNext = _this.requestMoveNext.bind(_this), _this.requestMovePrev = _this.requestMovePrev.bind(_this), _this;\n        }\n\n        return function (subClass, superClass) {\n          if (\"function\" != typeof superClass && null !== superClass) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              enumerable: !1,\n              writable: !0,\n              configurable: !0\n            }\n          }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);\n        }(ReactImageLightbox, _react.Component), _createClass(ReactImageLightbox, null, [{\n          key: \"isTargetMatchImage\",\n          value: function value(target) {\n            return target && /ril-image-current/.test(target.className);\n          }\n        }, {\n          key: \"parseMouseEvent\",\n          value: function value(mouseEvent) {\n            return {\n              id: \"mouse\",\n              source: _constant.SOURCE_MOUSE,\n              x: parseInt(mouseEvent.clientX, 10),\n              y: parseInt(mouseEvent.clientY, 10)\n            };\n          }\n        }, {\n          key: \"parseTouchPointer\",\n          value: function value(touchPointer) {\n            return {\n              id: touchPointer.identifier,\n              source: _constant.SOURCE_TOUCH,\n              x: parseInt(touchPointer.clientX, 10),\n              y: parseInt(touchPointer.clientY, 10)\n            };\n          }\n        }, {\n          key: \"parsePointerEvent\",\n          value: function value(pointerEvent) {\n            return {\n              id: pointerEvent.pointerId,\n              source: _constant.SOURCE_POINTER,\n              x: parseInt(pointerEvent.clientX, 10),\n              y: parseInt(pointerEvent.clientY, 10)\n            };\n          } // Request to transition to the previous image\n\n        }, {\n          key: \"getTransform\",\n          value: function value(_ref) {\n            var _ref$x = _ref.x,\n                x = void 0 === _ref$x ? 0 : _ref$x,\n                _ref$y = _ref.y,\n                y = void 0 === _ref$y ? 0 : _ref$y,\n                _ref$zoom = _ref.zoom,\n                zoom = void 0 === _ref$zoom ? 1 : _ref$zoom,\n                width = _ref.width,\n                targetWidth = _ref.targetWidth,\n                nextX = x,\n                windowWidth = (0, _util.getWindowWidth)();\n            width > windowWidth && (nextX += (windowWidth - width) / 2);\n            var scaleFactor = zoom;\n            return width && targetWidth && (scaleFactor = zoom * (targetWidth / width)), {\n              transform: \"translate3d(\" + nextX + \"px,\" + y + \"px,0) scale3d(\" + scaleFactor + \",\" + scaleFactor + \",1)\"\n            };\n          }\n        }]), _createClass(ReactImageLightbox, [{\n          key: \"componentWillMount\",\n          value: function value() {\n            // Timeouts - always clear it before umount\n            this.timeouts = [], // Current action\n            this.currentAction = _constant.ACTION_NONE, // Events source\n            this.eventsSource = _constant.SOURCE_ANY, // Empty pointers list\n            this.pointerList = [], // Prevent inner close\n            this.preventInnerClose = !1, this.preventInnerCloseTimeout = null, // Used to disable animation when changing props.mainSrc|nextSrc|prevSrc\n            this.keyPressed = !1, // Used to store load state / dimensions of images\n            this.imageCache = {}, // Time the last keydown event was called (used in keyboard action rate limiting)\n            this.lastKeyDownTime = 0, // Used for debouncing window resize event\n            this.resizeTimeout = null, // Used to determine when actions are triggered by the scroll wheel\n            this.wheelActionTimeout = null, this.resetScrollTimeout = null, this.scrollX = 0, this.scrollY = 0, // Used in panning zoomed images\n            this.moveStartX = 0, this.moveStartY = 0, this.moveStartOffsetX = 0, this.moveStartOffsetY = 0, // Used to swipe\n            this.swipeStartX = 0, this.swipeStartY = 0, this.swipeEndX = 0, this.swipeEndY = 0, // Used to pinch\n            this.pinchTouchList = null, this.pinchDistance = 0, // Used to differentiate between images with identical src\n            this.keyCounter = 0, // Used to detect a move when all src's remain unchanged (four or more of the same image in a row)\n            this.moveRequested = !1, this.props.animationDisabled || // Make opening animation play\n            this.setState({\n              isClosing: !1\n            });\n          }\n        }, {\n          key: \"componentDidMount\",\n          value: function value() {\n            var _this2 = this; // Prevents cross-origin errors when using a cross-origin iframe\n\n\n            this.windowContext = (0, _util.getHighestSafeWindowContext)(), this.listeners = {\n              resize: this.handleWindowResize,\n              mouseup: this.handleMouseUp,\n              touchend: this.handleTouchEnd,\n              touchcancel: this.handleTouchEnd,\n              pointerdown: this.handlePointerEvent,\n              pointermove: this.handlePointerEvent,\n              pointerup: this.handlePointerEvent,\n              pointercancel: this.handlePointerEvent\n            }, Object.keys(this.listeners).forEach(function (type) {\n              _this2.windowContext.addEventListener(type, _this2.listeners[type]);\n            }), this.loadAllImages();\n          }\n        }, {\n          key: \"componentWillReceiveProps\",\n          value: function value(nextProps) {\n            var _this3 = this,\n                sourcesChanged = !1,\n                prevSrcDict = {},\n                nextSrcDict = {}; // Iterate through the source types for prevProps and nextProps to\n            //  determine if any of the sources changed\n\n\n            this.getSrcTypes().forEach(function (srcType) {\n              _this3.props[srcType.name] !== nextProps[srcType.name] && (sourcesChanged = !0, prevSrcDict[_this3.props[srcType.name]] = !0, nextSrcDict[nextProps[srcType.name]] = !0);\n            }), (sourcesChanged || this.moveRequested) && ( // Reset the loaded state for images not rendered next\n            Object.keys(prevSrcDict).forEach(function (prevSrc) {\n              !(prevSrc in nextSrcDict) && prevSrc in _this3.imageCache && (_this3.imageCache[prevSrc].loaded = !1);\n            }), this.moveRequested = !1, // Load any new images\n            this.loadAllImages(nextProps));\n          }\n        }, {\n          key: \"shouldComponentUpdate\",\n          value: function value() {\n            // Wait for move...\n            return !this.moveRequested;\n          }\n        }, {\n          key: \"componentWillUnmount\",\n          value: function value() {\n            var _this4 = this;\n\n            this.didUnmount = !0, Object.keys(this.listeners).forEach(function (type) {\n              _this4.windowContext.removeEventListener(type, _this4.listeners[type]);\n            }), this.timeouts.forEach(function (tid) {\n              return clearTimeout(tid);\n            });\n          }\n        }, {\n          key: \"setTimeout\",\n          value: function (_setTimeout) {\n            function setTimeout(_x, _x2) {\n              return _setTimeout.apply(this, arguments);\n            }\n\n            return setTimeout.toString = function () {\n              return _setTimeout.toString();\n            }, setTimeout;\n          }(function (func, time) {\n            var _this5 = this,\n                id = setTimeout(function () {\n              _this5.timeouts = _this5.timeouts.filter(function (tid) {\n                return tid !== id;\n              }), func();\n            }, time);\n\n            return this.timeouts.push(id), id;\n          })\n        }, {\n          key: \"setPreventInnerClose\",\n          value: function value() {\n            var _this6 = this;\n\n            this.preventInnerCloseTimeout && this.clearTimeout(this.preventInnerCloseTimeout), this.preventInnerClose = !0, this.preventInnerCloseTimeout = this.setTimeout(function () {\n              _this6.preventInnerClose = !1, _this6.preventInnerCloseTimeout = null;\n            }, 100);\n          } // Get info for the best suited image to display with the given srcType\n\n        }, {\n          key: \"getBestImageForType\",\n          value: function value(srcType) {\n            var imageSrc = this.props[srcType],\n                fitSizes = {};\n            if (this.isImageLoaded(imageSrc)) // Use full-size image if available\n              fitSizes = this.getFitSizes(this.imageCache[imageSrc].width, this.imageCache[imageSrc].height);else {\n              if (!this.isImageLoaded(this.props[srcType + \"Thumbnail\"])) return null; // Fall back to using thumbnail if the image has not been loaded\n\n              imageSrc = this.props[srcType + \"Thumbnail\"], fitSizes = this.getFitSizes(this.imageCache[imageSrc].width, this.imageCache[imageSrc].height, !0);\n            }\n            return {\n              src: imageSrc,\n              height: this.imageCache[imageSrc].height,\n              width: this.imageCache[imageSrc].width,\n              targetHeight: fitSizes.height,\n              targetWidth: fitSizes.width\n            };\n          } // Get sizing for when an image is larger than the window\n\n        }, {\n          key: \"getFitSizes\",\n          value: function value(width, height, stretch) {\n            var boxSize = this.getLightboxRect(),\n                maxHeight = boxSize.height - 2 * this.props.imagePadding,\n                maxWidth = boxSize.width - 2 * this.props.imagePadding;\n            return stretch || (maxHeight = Math.min(maxHeight, height), maxWidth = Math.min(maxWidth, width)), maxWidth / maxHeight > width / height ? {\n              width: width * maxHeight / height,\n              height: maxHeight\n            } : {\n              width: maxWidth,\n              height: height * maxWidth / width\n            };\n          }\n        }, {\n          key: \"getMaxOffsets\",\n          value: function value() {\n            var zoomLevel = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.state.zoomLevel,\n                currentImageInfo = this.getBestImageForType(\"mainSrc\");\n            if (null === currentImageInfo) return {\n              maxX: 0,\n              minX: 0,\n              maxY: 0,\n              minY: 0\n            };\n            var boxSize = this.getLightboxRect(),\n                zoomMultiplier = this.getZoomMultiplier(zoomLevel),\n                maxX = 0,\n                maxY = 0;\n            return {\n              maxX: // if there is still blank space in the X dimension, don't limit except to the opposite edge\n              maxX = zoomMultiplier * currentImageInfo.width - boxSize.width < 0 ? (boxSize.width - zoomMultiplier * currentImageInfo.width) / 2 : (zoomMultiplier * currentImageInfo.width - boxSize.width) / 2,\n              maxY: // if there is still blank space in the Y dimension, don't limit except to the opposite edge\n              maxY = zoomMultiplier * currentImageInfo.height - boxSize.height < 0 ? (boxSize.height - zoomMultiplier * currentImageInfo.height) / 2 : (zoomMultiplier * currentImageInfo.height - boxSize.height) / 2,\n              minX: -1 * maxX,\n              minY: -1 * maxY\n            };\n          } // Get image src types\n\n        }, {\n          key: \"getSrcTypes\",\n          value: function value() {\n            return [{\n              name: \"mainSrc\",\n              keyEnding: \"i\" + this.keyCounter\n            }, {\n              name: \"mainSrcThumbnail\",\n              keyEnding: \"t\" + this.keyCounter\n            }, {\n              name: \"nextSrc\",\n              keyEnding: \"i\" + (this.keyCounter + 1)\n            }, {\n              name: \"nextSrcThumbnail\",\n              keyEnding: \"t\" + (this.keyCounter + 1)\n            }, {\n              name: \"prevSrc\",\n              keyEnding: \"i\" + (this.keyCounter - 1)\n            }, {\n              name: \"prevSrcThumbnail\",\n              keyEnding: \"t\" + (this.keyCounter - 1)\n            }];\n          }\n          /**\n          * Get sizing when the image is scaled\n          */\n\n        }, {\n          key: \"getZoomMultiplier\",\n          value: function value() {\n            var zoomLevel = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.state.zoomLevel;\n            return Math.pow(_constant.ZOOM_RATIO, zoomLevel);\n          }\n          /**\n          * Get the size of the lightbox in pixels\n          */\n\n        }, {\n          key: \"getLightboxRect\",\n          value: function value() {\n            return this.outerEl ? this.outerEl.getBoundingClientRect() : {\n              width: (0, _util.getWindowWidth)(),\n              height: (0, _util.getWindowHeight)(),\n              top: 0,\n              right: 0,\n              bottom: 0,\n              left: 0\n            };\n          }\n        }, {\n          key: \"clearTimeout\",\n          value: function (_clearTimeout) {\n            function clearTimeout(_x3) {\n              return _clearTimeout.apply(this, arguments);\n            }\n\n            return clearTimeout.toString = function () {\n              return _clearTimeout.toString();\n            }, clearTimeout;\n          }(function (id) {\n            this.timeouts = this.timeouts.filter(function (tid) {\n              return tid !== id;\n            }), clearTimeout(id);\n          })\n        }, {\n          key: \"changeZoom\",\n          value: function value(zoomLevel, clientX, clientY) {\n            // Ignore if zoom disabled\n            if (this.props.enableZoom) {\n              // Constrain zoom level to the set bounds\n              var nextZoomLevel = Math.max(_constant.MIN_ZOOM_LEVEL, Math.min(_constant.MAX_ZOOM_LEVEL, zoomLevel)); // Ignore requests that don't change the zoom level\n\n              if (nextZoomLevel !== this.state.zoomLevel) if (nextZoomLevel !== _constant.MIN_ZOOM_LEVEL) {\n                var imageBaseSize = this.getBestImageForType(\"mainSrc\");\n\n                if (null !== imageBaseSize) {\n                  var currentZoomMultiplier = this.getZoomMultiplier(),\n                      nextZoomMultiplier = this.getZoomMultiplier(nextZoomLevel),\n                      boxRect = this.getLightboxRect(),\n                      pointerX = void 0 !== clientX ? clientX - boxRect.left : boxRect.width / 2,\n                      pointerY = void 0 !== clientY ? clientY - boxRect.top : boxRect.height / 2,\n                      currentImageOffsetX = (boxRect.width - imageBaseSize.width * currentZoomMultiplier) / 2,\n                      currentImageOffsetY = (boxRect.height - imageBaseSize.height * currentZoomMultiplier) / 2,\n                      nextImageRealOffsetX = pointerX - (pointerX - (currentImageOffsetX - this.state.offsetX)) / currentZoomMultiplier * nextZoomMultiplier,\n                      nextImageRealOffsetY = pointerY - (pointerY - (currentImageOffsetY - this.state.offsetY)) / currentZoomMultiplier * nextZoomMultiplier,\n                      nextOffsetX = (boxRect.width - imageBaseSize.width * nextZoomMultiplier) / 2 - nextImageRealOffsetX,\n                      nextOffsetY = (boxRect.height - imageBaseSize.height * nextZoomMultiplier) / 2 - nextImageRealOffsetY; // When zooming out, limit the offset so things don't get left askew\n\n                  if (this.currentAction !== _constant.ACTION_PINCH) {\n                    var maxOffsets = this.getMaxOffsets();\n                    this.state.zoomLevel > nextZoomLevel && (nextOffsetX = Math.max(maxOffsets.minX, Math.min(maxOffsets.maxX, nextOffsetX)), nextOffsetY = Math.max(maxOffsets.minY, Math.min(maxOffsets.maxY, nextOffsetY)));\n                  }\n\n                  this.setState({\n                    zoomLevel: nextZoomLevel,\n                    offsetX: nextOffsetX,\n                    offsetY: nextOffsetY\n                  });\n                }\n              } else // Snap back to center if zoomed all the way out\n                this.setState({\n                  zoomLevel: nextZoomLevel,\n                  offsetX: 0,\n                  offsetY: 0\n                });\n            }\n          }\n        }, {\n          key: \"closeIfClickInner\",\n          value: function value(event) {\n            !this.preventInnerClose && event.target.className.search(/\\bril-inner\\b/) > -1 && this.requestClose(event);\n          }\n          /**\n          * Handle user keyboard actions\n          */\n\n        }, {\n          key: \"handleKeyInput\",\n          value: function value(event) {\n            // Ignore key input during animations\n            if (event.stopPropagation(), !this.isAnimating()) // Allow slightly faster navigation through the images when user presses keys repeatedly\n              if (\"keyup\" !== event.type) {\n                var keyCode = event.which || event.keyCode,\n                    currentTime = new Date(); // Ignore key presses that happen too close to each other (when rapid fire key pressing or holding down the key)\n                // But allow it if it's a lightbox closing action\n\n                if (!(currentTime.getTime() - this.lastKeyDownTime < this.props.keyRepeatLimit && keyCode !== _constant.KEYS.ESC)) switch (this.lastKeyDownTime = currentTime.getTime(), keyCode) {\n                  // ESC key closes the lightbox\n                  case _constant.KEYS.ESC:\n                    event.preventDefault(), this.requestClose(event);\n                    break;\n                  // Left arrow key moves to previous image\n\n                  case _constant.KEYS.LEFT_ARROW:\n                    if (!this.props.prevSrc) return;\n                    event.preventDefault(), this.keyPressed = !0, this.requestMovePrev(event);\n                    break;\n                  // Right arrow key moves to next image\n\n                  case _constant.KEYS.RIGHT_ARROW:\n                    if (!this.props.nextSrc) return;\n                    event.preventDefault(), this.keyPressed = !0, this.requestMoveNext(event);\n                }\n              } else this.lastKeyDownTime -= this.props.keyRepeatKeyupBonus;\n          }\n          /**\n          * Handle a mouse wheel event over the lightbox container\n          */\n\n        }, {\n          key: \"handleOuterMousewheel\",\n          value: function value(event) {\n            var _this7 = this; // Prevent scrolling of the background\n\n\n            event.preventDefault(), event.stopPropagation();\n            var xThreshold = _constant.WHEEL_MOVE_X_THRESHOLD,\n                actionDelay = 0; // Prevent rapid-fire zoom behavior\n\n            if (this.clearTimeout(this.resetScrollTimeout), this.resetScrollTimeout = this.setTimeout(function () {\n              _this7.scrollX = 0, _this7.scrollY = 0;\n            }, 300), null === this.wheelActionTimeout && !this.isAnimating()) {\n              if (Math.abs(event.deltaY) < Math.abs(event.deltaX)) {\n                // handle horizontal scrolls with image moves\n                this.scrollY = 0, this.scrollX += event.deltaX;\n                var bigLeapX = xThreshold / 2; // If the scroll amount has accumulated sufficiently, or a large leap was taken\n\n                this.scrollX >= xThreshold || event.deltaX >= bigLeapX ? ( // Scroll right moves to next\n                this.requestMoveNext(event), actionDelay = 500, this.scrollX = 0) : (this.scrollX <= -1 * xThreshold || event.deltaX <= -1 * bigLeapX) && ( // Scroll left moves to previous\n                this.requestMovePrev(event), actionDelay = 500, this.scrollX = 0);\n              } // Allow successive actions after the set delay\n\n\n              0 !== actionDelay && (this.wheelActionTimeout = this.setTimeout(function () {\n                _this7.wheelActionTimeout = null;\n              }, actionDelay));\n            }\n          }\n        }, {\n          key: \"handleImageMouseWheel\",\n          value: function value(event) {\n            event.preventDefault();\n            var yThreshold = _constant.WHEEL_MOVE_Y_THRESHOLD;\n\n            if (Math.abs(event.deltaY) >= Math.abs(event.deltaX)) {\n              // If the vertical scroll amount was large enough, perform a zoom\n              if (event.stopPropagation(), Math.abs(event.deltaY) < yThreshold) return;\n              this.scrollX = 0, this.scrollY += event.deltaY, this.changeZoom(this.state.zoomLevel - event.deltaY, event.clientX, event.clientY);\n            }\n          }\n          /**\n          * Handle a double click on the current image\n          */\n\n        }, {\n          key: \"handleImageDoubleClick\",\n          value: function value(event) {\n            this.state.zoomLevel > _constant.MIN_ZOOM_LEVEL ? // A double click when zoomed in zooms all the way out\n            this.changeZoom(_constant.MIN_ZOOM_LEVEL, event.clientX, event.clientY) : // A double click when zoomed all the way out zooms in\n            this.changeZoom(this.state.zoomLevel + _constant.ZOOM_BUTTON_INCREMENT_SIZE, event.clientX, event.clientY);\n          }\n        }, {\n          key: \"shouldHandleEvent\",\n          value: function value(source) {\n            if (this.eventsSource === source) return !0;\n            if (this.eventsSource === _constant.SOURCE_ANY) return this.eventsSource = source, !0;\n\n            switch (source) {\n              case _constant.SOURCE_MOUSE:\n                return !1;\n\n              case _constant.SOURCE_TOUCH:\n                return this.eventsSource = _constant.SOURCE_TOUCH, this.filterPointersBySource(), !0;\n\n              case _constant.SOURCE_POINTER:\n                return this.eventsSource === _constant.SOURCE_MOUSE && (this.eventsSource = _constant.SOURCE_POINTER, this.filterPointersBySource(), !0);\n\n              default:\n                return !1;\n            }\n          }\n        }, {\n          key: \"addPointer\",\n          value: function value(pointer) {\n            this.pointerList.push(pointer);\n          }\n        }, {\n          key: \"removePointer\",\n          value: function value(pointer) {\n            this.pointerList = this.pointerList.filter(function (_ref2) {\n              return _ref2.id !== pointer.id;\n            });\n          }\n        }, {\n          key: \"filterPointersBySource\",\n          value: function value() {\n            var _this8 = this;\n\n            this.pointerList = this.pointerList.filter(function (_ref3) {\n              return _ref3.source === _this8.eventsSource;\n            });\n          }\n        }, {\n          key: \"handleMouseDown\",\n          value: function value(event) {\n            this.shouldHandleEvent(_constant.SOURCE_MOUSE) && ReactImageLightbox.isTargetMatchImage(event.target) && (this.addPointer(ReactImageLightbox.parseMouseEvent(event)), this.multiPointerStart(event));\n          }\n        }, {\n          key: \"handleMouseMove\",\n          value: function value(event) {\n            this.shouldHandleEvent(_constant.SOURCE_MOUSE) && this.multiPointerMove(event, [ReactImageLightbox.parseMouseEvent(event)]);\n          }\n        }, {\n          key: \"handleMouseUp\",\n          value: function value(event) {\n            this.shouldHandleEvent(_constant.SOURCE_MOUSE) && (this.removePointer(ReactImageLightbox.parseMouseEvent(event)), this.multiPointerEnd(event));\n          }\n        }, {\n          key: \"handlePointerEvent\",\n          value: function value(event) {\n            if (this.shouldHandleEvent(_constant.SOURCE_POINTER)) switch (event.type) {\n              case \"pointerdown\":\n                ReactImageLightbox.isTargetMatchImage(event.target) && (this.addPointer(ReactImageLightbox.parsePointerEvent(event)), this.multiPointerStart(event));\n                break;\n\n              case \"pointermove\":\n                this.multiPointerMove(event, [ReactImageLightbox.parsePointerEvent(event)]);\n                break;\n\n              case \"pointerup\":\n              case \"pointercancel\":\n                this.removePointer(ReactImageLightbox.parsePointerEvent(event)), this.multiPointerEnd(event);\n            }\n          }\n        }, {\n          key: \"handleTouchStart\",\n          value: function value(event) {\n            var _this9 = this;\n\n            this.shouldHandleEvent(_constant.SOURCE_TOUCH) && ReactImageLightbox.isTargetMatchImage(event.target) && ([].forEach.call(event.changedTouches, function (eventTouch) {\n              return _this9.addPointer(ReactImageLightbox.parseTouchPointer(eventTouch));\n            }), this.multiPointerStart(event));\n          }\n        }, {\n          key: \"handleTouchMove\",\n          value: function value(event) {\n            this.shouldHandleEvent(_constant.SOURCE_TOUCH) && this.multiPointerMove(event, [].map.call(event.changedTouches, function (eventTouch) {\n              return ReactImageLightbox.parseTouchPointer(eventTouch);\n            }));\n          }\n        }, {\n          key: \"handleTouchEnd\",\n          value: function value(event) {\n            var _this10 = this;\n\n            this.shouldHandleEvent(_constant.SOURCE_TOUCH) && ([].map.call(event.changedTouches, function (touch) {\n              return _this10.removePointer(ReactImageLightbox.parseTouchPointer(touch));\n            }), this.multiPointerEnd(event));\n          }\n        }, {\n          key: \"decideMoveOrSwipe\",\n          value: function value(pointer) {\n            this.state.zoomLevel <= _constant.MIN_ZOOM_LEVEL ? this.handleSwipeStart(pointer) : this.handleMoveStart(pointer);\n          }\n        }, {\n          key: \"multiPointerStart\",\n          value: function value(event) {\n            switch (this.handleEnd(null), this.pointerList.length) {\n              case 1:\n                event.preventDefault(), this.decideMoveOrSwipe(this.pointerList[0]);\n                break;\n\n              case 2:\n                event.preventDefault(), this.handlePinchStart(this.pointerList);\n            }\n          }\n        }, {\n          key: \"multiPointerMove\",\n          value: function value(event, pointerList) {\n            switch (this.currentAction) {\n              case _constant.ACTION_MOVE:\n                event.preventDefault(), this.handleMove(pointerList[0]);\n                break;\n\n              case _constant.ACTION_SWIPE:\n                event.preventDefault(), this.handleSwipe(pointerList[0]);\n                break;\n\n              case _constant.ACTION_PINCH:\n                event.preventDefault(), this.handlePinch(pointerList);\n            }\n          }\n        }, {\n          key: \"multiPointerEnd\",\n          value: function value(event) {\n            switch (this.currentAction !== _constant.ACTION_NONE && (this.setPreventInnerClose(), this.handleEnd(event)), this.pointerList.length) {\n              case 0:\n                this.eventsSource = _constant.SOURCE_ANY;\n                break;\n\n              case 1:\n                event.preventDefault(), this.decideMoveOrSwipe(this.pointerList[0]);\n                break;\n\n              case 2:\n                event.preventDefault(), this.handlePinchStart(this.pointerList);\n            }\n          }\n        }, {\n          key: \"handleEnd\",\n          value: function value(event) {\n            switch (this.currentAction) {\n              case _constant.ACTION_MOVE:\n                this.handleMoveEnd(event);\n                break;\n\n              case _constant.ACTION_SWIPE:\n                this.handleSwipeEnd(event);\n                break;\n\n              case _constant.ACTION_PINCH:\n                this.handlePinchEnd(event);\n            }\n          } // Handle move start over the lightbox container\n          // This happens:\n          // - On a mouseDown event\n          // - On a touchstart event\n\n        }, {\n          key: \"handleMoveStart\",\n          value: function value(_ref4) {\n            var clientX = _ref4.x,\n                clientY = _ref4.y;\n            this.props.enableZoom && (this.currentAction = _constant.ACTION_MOVE, this.moveStartX = clientX, this.moveStartY = clientY, this.moveStartOffsetX = this.state.offsetX, this.moveStartOffsetY = this.state.offsetY);\n          } // Handle dragging over the lightbox container\n          // This happens:\n          // - After a mouseDown and before a mouseUp event\n          // - After a touchstart and before a touchend event\n\n        }, {\n          key: \"handleMove\",\n          value: function value(_ref5) {\n            var clientX = _ref5.x,\n                clientY = _ref5.y,\n                newOffsetX = this.moveStartX - clientX + this.moveStartOffsetX,\n                newOffsetY = this.moveStartY - clientY + this.moveStartOffsetY;\n            this.state.offsetX === newOffsetX && this.state.offsetY === newOffsetY || this.setState({\n              offsetX: newOffsetX,\n              offsetY: newOffsetY\n            });\n          }\n        }, {\n          key: \"handleMoveEnd\",\n          value: function value() {\n            var _this11 = this;\n\n            this.currentAction = _constant.ACTION_NONE, this.moveStartX = 0, this.moveStartY = 0, this.moveStartOffsetX = 0, this.moveStartOffsetY = 0; // Snap image back into frame if outside max offset range\n\n            var maxOffsets = this.getMaxOffsets(),\n                nextOffsetX = Math.max(maxOffsets.minX, Math.min(maxOffsets.maxX, this.state.offsetX)),\n                nextOffsetY = Math.max(maxOffsets.minY, Math.min(maxOffsets.maxY, this.state.offsetY));\n            nextOffsetX === this.state.offsetX && nextOffsetY === this.state.offsetY || (this.setState({\n              offsetX: nextOffsetX,\n              offsetY: nextOffsetY,\n              shouldAnimate: !0\n            }), this.setTimeout(function () {\n              _this11.setState({\n                shouldAnimate: !1\n              });\n            }, this.props.animationDuration));\n          }\n        }, {\n          key: \"handleSwipeStart\",\n          value: function value(_ref6) {\n            var clientX = _ref6.x,\n                clientY = _ref6.y;\n            this.currentAction = _constant.ACTION_SWIPE, this.swipeStartX = clientX, this.swipeStartY = clientY, this.swipeEndX = clientX, this.swipeEndY = clientY;\n          }\n        }, {\n          key: \"handleSwipe\",\n          value: function value(_ref7) {\n            var clientX = _ref7.x,\n                clientY = _ref7.y;\n            this.swipeEndX = clientX, this.swipeEndY = clientY;\n          }\n        }, {\n          key: \"handleSwipeEnd\",\n          value: function value(event) {\n            var xDiff = this.swipeEndX - this.swipeStartX,\n                xDiffAbs = Math.abs(xDiff),\n                yDiffAbs = Math.abs(this.swipeEndY - this.swipeStartY);\n\n            if (this.currentAction = _constant.ACTION_NONE, this.swipeStartX = 0, this.swipeStartY = 0, this.swipeEndX = 0, this.swipeEndY = 0, !(!event || this.isAnimating() || xDiffAbs < 1.5 * yDiffAbs)) {\n              if (xDiffAbs < _constant.MIN_SWIPE_DISTANCE) if (xDiffAbs < this.getLightboxRect().width / 4) return;\n              xDiff > 0 && this.props.prevSrc ? (event.preventDefault(), this.requestMovePrev()) : xDiff < 0 && this.props.nextSrc && (event.preventDefault(), this.requestMoveNext());\n            }\n          }\n        }, {\n          key: \"calculatePinchDistance\",\n          value: function value() {\n            var _ref8 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.pinchTouchList,\n                _ref9 = _slicedToArray(_ref8, 2),\n                a = _ref9[0],\n                b = _ref9[1];\n\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n          }\n        }, {\n          key: \"calculatePinchCenter\",\n          value: function value() {\n            var _ref10 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.pinchTouchList,\n                _ref11 = _slicedToArray(_ref10, 2),\n                a = _ref11[0],\n                b = _ref11[1];\n\n            return {\n              x: a.x - (a.x - b.x) / 2,\n              y: a.y - (a.y - b.y) / 2\n            };\n          }\n        }, {\n          key: \"handlePinchStart\",\n          value: function value(pointerList) {\n            this.props.enableZoom && (this.currentAction = _constant.ACTION_PINCH, this.pinchTouchList = pointerList.map(function (_ref12) {\n              return {\n                id: _ref12.id,\n                x: _ref12.x,\n                y: _ref12.y\n              };\n            }), this.pinchDistance = this.calculatePinchDistance());\n          }\n        }, {\n          key: \"handlePinch\",\n          value: function value(pointerList) {\n            this.pinchTouchList = this.pinchTouchList.map(function (oldPointer) {\n              for (var i = 0; i < pointerList.length; i += 1) {\n                if (pointerList[i].id === oldPointer.id) return pointerList[i];\n              }\n\n              return oldPointer;\n            });\n            var newDistance = this.calculatePinchDistance(),\n                zoomLevel = this.state.zoomLevel + newDistance - this.pinchDistance;\n            this.pinchDistance = newDistance;\n\n            var _calculatePinchCenter = this.calculatePinchCenter(this.pinchTouchList),\n                clientX = _calculatePinchCenter.x,\n                clientY = _calculatePinchCenter.y;\n\n            this.changeZoom(zoomLevel, clientX, clientY);\n          }\n        }, {\n          key: \"handlePinchEnd\",\n          value: function value() {\n            this.currentAction = _constant.ACTION_NONE, this.pinchTouchList = null, this.pinchDistance = 0;\n          } // Handle the window resize event\n\n        }, {\n          key: \"handleWindowResize\",\n          value: function value() {\n            this.clearTimeout(this.resizeTimeout), this.resizeTimeout = this.setTimeout(this.forceUpdate.bind(this), 100);\n          }\n        }, {\n          key: \"handleZoomInButtonClick\",\n          value: function value() {\n            var nextZoomLevel = this.state.zoomLevel + _constant.ZOOM_BUTTON_INCREMENT_SIZE;\n            this.changeZoom(nextZoomLevel), nextZoomLevel === _constant.MAX_ZOOM_LEVEL && this.zoomOutBtn.focus();\n          }\n        }, {\n          key: \"handleZoomOutButtonClick\",\n          value: function value() {\n            var nextZoomLevel = this.state.zoomLevel - _constant.ZOOM_BUTTON_INCREMENT_SIZE;\n            this.changeZoom(nextZoomLevel), nextZoomLevel === _constant.MIN_ZOOM_LEVEL && this.zoomInBtn.focus();\n          }\n        }, {\n          key: \"handleCaptionMousewheel\",\n          value: function value(event) {\n            if (event.stopPropagation(), this.caption) {\n              var height = this.caption.getBoundingClientRect().height,\n                  _caption = this.caption,\n                  scrollHeight = _caption.scrollHeight,\n                  scrollTop = _caption.scrollTop;\n              (event.deltaY > 0 && height + scrollTop >= scrollHeight || event.deltaY < 0 && scrollTop <= 0) && event.preventDefault();\n            }\n          } // Detach key and mouse input events\n\n        }, {\n          key: \"isAnimating\",\n          value: function value() {\n            return this.state.shouldAnimate || this.state.isClosing;\n          } // Check if image is loaded\n\n        }, {\n          key: \"isImageLoaded\",\n          value: function value(imageSrc) {\n            return imageSrc && imageSrc in this.imageCache && this.imageCache[imageSrc].loaded;\n          } // Load image from src and call callback with image width and height on load\n\n        }, {\n          key: \"loadImage\",\n          value: function value(srcType, imageSrc, done) {\n            var _this12 = this; // Return the image info if it is already cached\n\n\n            if (this.isImageLoaded(imageSrc)) this.setTimeout(function () {\n              done();\n            }, 1);else {\n              var inMemoryImage = new global.Image();\n              this.props.imageCrossOrigin && (inMemoryImage.crossOrigin = this.props.imageCrossOrigin), inMemoryImage.onerror = function (errorEvent) {\n                _this12.props.onImageLoadError(imageSrc, srcType, errorEvent), // failed to load so set the state loadErrorStatus\n                _this12.setState(function (prevState) {\n                  return {\n                    loadErrorStatus: _extends({}, prevState.loadErrorStatus, _defineProperty({}, srcType, !0))\n                  };\n                }), done(errorEvent);\n              }, inMemoryImage.onload = function () {\n                _this12.props.onImageLoad(imageSrc, srcType, inMemoryImage), _this12.imageCache[imageSrc] = {\n                  loaded: !0,\n                  width: inMemoryImage.width,\n                  height: inMemoryImage.height\n                }, done();\n              }, inMemoryImage.src = imageSrc;\n            }\n          } // Load all images and their thumbnails\n\n        }, {\n          key: \"loadAllImages\",\n          value: function value() {\n            var _this13 = this,\n                props = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props; // Load the images\n\n\n            this.getSrcTypes().forEach(function (srcType) {\n              var type = srcType.name; // there is no error when we try to load it initially\n\n              props[type] && _this13.state.loadErrorStatus[type] && _this13.setState(function (prevState) {\n                return {\n                  loadErrorStatus: _extends({}, prevState.loadErrorStatus, _defineProperty({}, type, !1))\n                };\n              }), // Load unloaded images\n              props[type] && \"string\" == typeof props[type] && !_this13.isImageLoaded(props[type]) && _this13.loadImage(type, props[type], function (srcType, imageSrc) {\n                return function (err) {\n                  // Give up showing image on error\n                  err || _this13.props[srcType] !== imageSrc || _this13.didUnmount || // Force rerender with the new image\n                  _this13.forceUpdate(); // Don't rerender if the src is not the same as when the load started\n                  // or if the component has unmounted\n                };\n              }(type, props[type]));\n            });\n          } // Request that the lightbox be closed\n\n        }, {\n          key: \"requestClose\",\n          value: function value(event) {\n            var _this14 = this,\n                closeLightbox = function closeLightbox() {\n              return _this14.props.onCloseRequest(event);\n            }; // Call the parent close request\n\n\n            this.props.animationDisabled || \"keydown\" === event.type && !this.props.animationOnKeyInput ? // No animation\n            closeLightbox() : ( // With animation\n            // Start closing animation\n            this.setState({\n              isClosing: !0\n            }), // Perform the actual closing at the end of the animation\n            this.setTimeout(closeLightbox, this.props.animationDuration));\n          }\n        }, {\n          key: \"requestMove\",\n          value: function value(direction, event) {\n            var _this15 = this,\n                nextState = {\n              zoomLevel: _constant.MIN_ZOOM_LEVEL,\n              offsetX: 0,\n              offsetY: 0\n            }; // Reset the zoom level on image move\n            // Enable animated states\n\n\n            this.props.animationDisabled || this.keyPressed && !this.props.animationOnKeyInput || (nextState.shouldAnimate = !0, this.setTimeout(function () {\n              return _this15.setState({\n                shouldAnimate: !1\n              });\n            }, this.props.animationDuration)), this.keyPressed = !1, this.moveRequested = !0, \"prev\" === direction ? (this.keyCounter -= 1, this.setState(nextState), this.props.onMovePrevRequest(event)) : (this.keyCounter += 1, this.setState(nextState), this.props.onMoveNextRequest(event));\n          } // Request to transition to the next image\n\n        }, {\n          key: \"requestMoveNext\",\n          value: function value(event) {\n            this.requestMove(\"next\", event);\n          } // Request to transition to the previous image\n\n        }, {\n          key: \"requestMovePrev\",\n          value: function value(event) {\n            this.requestMove(\"prev\", event);\n          }\n        }, {\n          key: \"render\",\n          value: function value() {\n            var _this16 = this,\n                _props = this.props,\n                animationDisabled = _props.animationDisabled,\n                animationDuration = _props.animationDuration,\n                clickOutsideToClose = _props.clickOutsideToClose,\n                discourageDownloads = _props.discourageDownloads,\n                enableZoom = _props.enableZoom,\n                imageTitle = _props.imageTitle,\n                nextSrc = _props.nextSrc,\n                prevSrc = _props.prevSrc,\n                toolbarButtons = _props.toolbarButtons,\n                reactModalStyle = _props.reactModalStyle,\n                _onAfterOpen = _props.onAfterOpen,\n                imageCrossOrigin = _props.imageCrossOrigin,\n                reactModalProps = _props.reactModalProps,\n                _state = this.state,\n                zoomLevel = _state.zoomLevel,\n                offsetX = _state.offsetX,\n                offsetY = _state.offsetY,\n                isClosing = _state.isClosing,\n                loadErrorStatus = _state.loadErrorStatus,\n                boxSize = this.getLightboxRect(),\n                transitionStyle = {}; // Transition settings for sliding animations\n\n\n            !animationDisabled && this.isAnimating() && (transitionStyle = _extends({}, transitionStyle, {\n              transition: \"transform \" + animationDuration + \"ms\"\n            })); // Key endings to differentiate between images with the same src\n\n            var keyEndings = {};\n            this.getSrcTypes().forEach(function (_ref13) {\n              var name = _ref13.name,\n                  keyEnding = _ref13.keyEnding;\n              keyEndings[name] = keyEnding;\n            }); // Images to be displayed\n\n            var displayItems = [],\n                addItem = function addItem(srcType, imageClass) {\n              var baseStyle = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n                  DisplayItem = _this16.props[srcType];\n              DisplayItem && (\"string\" == typeof DisplayItem && function (srcType, imageClass, transforms) {\n                // Ignore types that have no source defined for their full size image\n                if (_this16.props[srcType]) {\n                  var bestImageInfo = _this16.getBestImageForType(srcType),\n                      imageStyle = _extends({}, transitionStyle, ReactImageLightbox.getTransform(_extends({}, transforms, bestImageInfo))); // when error on one of the loads then push custom error stuff\n\n\n                  if (zoomLevel > _constant.MIN_ZOOM_LEVEL && (imageStyle.cursor = \"move\"), null === bestImageInfo && (object = loadErrorStatus, Object.keys(object).some(function (key) {\n                    return object[key];\n                  }))) displayItems.push(_react2.default.createElement(\"div\", {\n                    className: imageClass + \" ril__image ril-errored\",\n                    style: imageStyle,\n                    key: _this16.props[srcType] + keyEndings[srcType]\n                  }, _react2.default.createElement(\"div\", {\n                    className: \"ril__errorContainer\"\n                  }, _this16.props.imageLoadErrorMessage)));else if (null !== bestImageInfo) {\n                    var object,\n                        imageSrc = bestImageInfo.src;\n                    discourageDownloads ? (imageStyle.backgroundImage = \"url('\" + imageSrc + \"')\", displayItems.push(_react2.default.createElement(\"div\", {\n                      className: imageClass + \" ril__image ril__imageDiscourager\",\n                      onDoubleClick: _this16.handleImageDoubleClick,\n                      onWheel: _this16.handleImageMouseWheel,\n                      style: imageStyle,\n                      key: imageSrc + keyEndings[srcType]\n                    }, _react2.default.createElement(\"div\", {\n                      className: \"ril-download-blocker ril__downloadBlocker\"\n                    })))) : displayItems.push(_react2.default.createElement(\"img\", _extends({}, imageCrossOrigin ? {\n                      crossOrigin: imageCrossOrigin\n                    } : {}, {\n                      className: imageClass + \" ril__image\",\n                      onDoubleClick: _this16.handleImageDoubleClick,\n                      onWheel: _this16.handleImageMouseWheel,\n                      onDragStart: function onDragStart(e) {\n                        return e.preventDefault();\n                      },\n                      style: imageStyle,\n                      src: imageSrc,\n                      key: imageSrc + keyEndings[srcType],\n                      alt: \"string\" == typeof imageTitle ? imageTitle : (0, _util.translate)(\"Image\"),\n                      draggable: !1\n                    })));\n                  } else {\n                    var loadingIcon = _react2.default.createElement(\"div\", {\n                      className: \"ril-loading-circle ril__loadingCircle ril__loadingContainer__icon\"\n                    }, [].concat(_toConsumableArray(new Array(12))).map(function (_, index) {\n                      return _react2.default.createElement(\"div\", {\n                        // eslint-disable-next-line react/no-array-index-key\n                        key: index,\n                        className: \"ril-loading-circle-point ril__loadingCirclePoint\"\n                      });\n                    })); // Fall back to loading icon if the thumbnail has not been loaded\n\n\n                    displayItems.push(_react2.default.createElement(\"div\", {\n                      className: imageClass + \" ril__image ril-not-loaded\",\n                      style: imageStyle,\n                      key: _this16.props[srcType] + keyEndings[srcType]\n                    }, _react2.default.createElement(\"div\", {\n                      className: \"ril__loadingContainer\"\n                    }, loadingIcon)));\n                  }\n                }\n              }(srcType, imageClass, baseStyle), (_isReact2.default.component(DisplayItem) || _isReact2.default.element(DisplayItem)) && function (srcType, imageClass) {\n                var transforms = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n                    imageStyle = _extends({}, transitionStyle, ReactImageLightbox.getTransform(_extends({}, transforms))),\n                    DisplayItem = _this16.props[srcType];\n\n                DisplayItem = _isReact2.default.component(DisplayItem) ? _react2.default.createElement(DisplayItem, null) : DisplayItem, displayItems.push(_react2.default.createElement(\"div\", {\n                  className: imageClass + \" ril__image\",\n                  onDoubleClick: _this16.handleImageDoubleClick,\n                  onWheel: _this16.handleImageMouseWheel,\n                  onDragStart: function onDragStart(e) {\n                    return e.preventDefault();\n                  },\n                  style: imageStyle,\n                  key: keyEndings[srcType],\n                  draggable: !1\n                }, DisplayItem));\n              }(srcType, imageClass, baseStyle));\n            },\n                zoomMultiplier = this.getZoomMultiplier(); // Next Image (displayed on the right)\n\n\n            addItem(\"nextSrc\", \"ril-image-next ril__imageNext\", {\n              x: boxSize.width\n            }), // Main Image\n            addItem(\"mainSrc\", \"ril-image-current\", {\n              x: -1 * offsetX,\n              y: -1 * offsetY,\n              zoom: zoomMultiplier\n            }), // Previous Image (displayed on the left)\n            addItem(\"prevSrc\", \"ril-image-prev ril__imagePrev\", {\n              x: -1 * boxSize.width\n            });\n            var modalStyle = {\n              overlay: _extends({\n                zIndex: 1e3,\n                backgroundColor: \"transparent\"\n              }, reactModalStyle.overlay),\n              content: _extends({\n                backgroundColor: \"transparent\",\n                overflow: \"hidden\",\n                // Needed, otherwise keyboard shortcuts scroll the page\n                border: \"none\",\n                borderRadius: 0,\n                padding: 0,\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0\n              }, reactModalStyle.content)\n            };\n            return _react2.default.createElement(_reactModal2.default, _extends({\n              isOpen: !0,\n              onRequestClose: clickOutsideToClose ? this.requestClose : void 0,\n              onAfterOpen: function onAfterOpen() {\n                // Focus on the div with key handlers\n                _this16.outerEl && _this16.outerEl.focus(), _onAfterOpen();\n              },\n              style: modalStyle,\n              contentLabel: (0, _util.translate)(\"Lightbox\"),\n              appElement: void 0 !== global.window ? global.window.document.body : void 0\n            }, reactModalProps), _react2.default.createElement(\"div\", {\n              // eslint-disable-line jsx-a11y/no-static-element-interactions\n              // Floating modal with closing animations\n              className: \"ril-outer ril__outer ril__outerAnimating \" + this.props.wrapperClassName + \" \" + (isClosing ? \"ril-closing ril__outerClosing\" : \"\"),\n              style: {\n                transition: \"opacity \" + animationDuration + \"ms\",\n                animationDuration: animationDuration + \"ms\",\n                animationDirection: isClosing ? \"normal\" : \"reverse\"\n              },\n              ref: function ref(el) {\n                _this16.outerEl = el;\n              },\n              onWheel: this.handleOuterMousewheel,\n              onMouseMove: this.handleMouseMove,\n              onMouseDown: this.handleMouseDown,\n              onTouchStart: this.handleTouchStart,\n              onTouchMove: this.handleTouchMove,\n              tabIndex: \"-1\",\n              onKeyDown: this.handleKeyInput,\n              onKeyUp: this.handleKeyInput\n            }, _react2.default.createElement(\"div\", {\n              // eslint-disable-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events\n              // Image holder\n              className: \"ril-inner ril__inner\",\n              onClick: clickOutsideToClose ? this.closeIfClickInner : void 0\n            }, displayItems), prevSrc && _react2.default.createElement(\"button\", {\n              // Move to previous image button\n              type: \"button\",\n              className: \"ril-prev-button ril__navButtons ril__navButtonPrev\",\n              key: \"prev\",\n              \"aria-label\": this.props.prevLabel,\n              onClick: this.isAnimating() ? void 0 : this.requestMovePrev\n            }), nextSrc && _react2.default.createElement(\"button\", {\n              // Move to next image button\n              type: \"button\",\n              className: \"ril-next-button ril__navButtons ril__navButtonNext\",\n              key: \"next\",\n              \"aria-label\": this.props.nextLabel,\n              onClick: this.isAnimating() ? void 0 : this.requestMoveNext\n            }), _react2.default.createElement(\"div\", {\n              // Lightbox toolbar\n              className: \"ril-toolbar ril__toolbar\"\n            }, _react2.default.createElement(\"ul\", {\n              className: \"ril-toolbar-left ril__toolbarSide ril__toolbarLeftSide\"\n            }, _react2.default.createElement(\"li\", {\n              className: \"ril-toolbar__item ril__toolbarItem\"\n            }, _react2.default.createElement(\"span\", {\n              className: \"ril-toolbar__item__child ril__toolbarItemChild\"\n            }, imageTitle))), _react2.default.createElement(\"ul\", {\n              className: \"ril-toolbar-right ril__toolbarSide ril__toolbarRightSide\"\n            }, toolbarButtons && toolbarButtons.map(function (button, i) {\n              return _react2.default.createElement(\"li\", {\n                key: \"button_\" + (i + 1),\n                className: \"ril-toolbar__item ril__toolbarItem\"\n              }, button);\n            }), enableZoom && _react2.default.createElement(\"li\", {\n              className: \"ril-toolbar__item ril__toolbarItem\"\n            }, _react2.default.createElement(\"button\", {\n              // Lightbox zoom in button\n              type: \"button\",\n              key: \"zoom-in\",\n              \"aria-label\": this.props.zoomInLabel,\n              className: [\"ril-zoom-in\", \"ril__toolbarItemChild\", \"ril__builtinButton\", \"ril__zoomInButton\"].concat(_toConsumableArray(zoomLevel === _constant.MAX_ZOOM_LEVEL ? [\"ril__builtinButtonDisabled\"] : [])).join(\" \"),\n              ref: function ref(el) {\n                _this16.zoomInBtn = el;\n              },\n              disabled: this.isAnimating() || zoomLevel === _constant.MAX_ZOOM_LEVEL,\n              onClick: this.isAnimating() || zoomLevel === _constant.MAX_ZOOM_LEVEL ? void 0 : this.handleZoomInButtonClick\n            })), enableZoom && _react2.default.createElement(\"li\", {\n              className: \"ril-toolbar__item ril__toolbarItem\"\n            }, _react2.default.createElement(\"button\", {\n              // Lightbox zoom out button\n              type: \"button\",\n              key: \"zoom-out\",\n              \"aria-label\": this.props.zoomOutLabel,\n              className: [\"ril-zoom-out\", \"ril__toolbarItemChild\", \"ril__builtinButton\", \"ril__zoomOutButton\"].concat(_toConsumableArray(zoomLevel === _constant.MIN_ZOOM_LEVEL ? [\"ril__builtinButtonDisabled\"] : [])).join(\" \"),\n              ref: function ref(el) {\n                _this16.zoomOutBtn = el;\n              },\n              disabled: this.isAnimating() || zoomLevel === _constant.MIN_ZOOM_LEVEL,\n              onClick: this.isAnimating() || zoomLevel === _constant.MIN_ZOOM_LEVEL ? void 0 : this.handleZoomOutButtonClick\n            })), _react2.default.createElement(\"li\", {\n              className: \"ril-toolbar__item ril__toolbarItem\"\n            }, _react2.default.createElement(\"button\", {\n              // Lightbox close button\n              type: \"button\",\n              key: \"close\",\n              \"aria-label\": this.props.closeLabel,\n              className: \"ril-close ril-toolbar__item__child ril__toolbarItemChild ril__builtinButton ril__closeButton\",\n              onClick: this.isAnimating() ? void 0 : this.requestClose\n            })))), this.props.imageCaption && // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            _react2.default.createElement(\"div\", {\n              // Image caption\n              onWheel: this.handleCaptionMousewheel,\n              onMouseDown: function onMouseDown(event) {\n                return event.stopPropagation();\n              },\n              className: \"ril-caption ril__caption\",\n              ref: function ref(el) {\n                _this16.caption = el;\n              }\n            }, _react2.default.createElement(\"div\", {\n              className: \"ril-caption-content ril__captionContent\"\n            }, this.props.imageCaption))));\n          }\n        }]), ReactImageLightbox;\n      }(),\n          srcTypes = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.element, _propTypes2.default.node]);\n\n      ReactImageLightbox.propTypes = {\n        //-----------------------------\n        // Image sources\n        //-----------------------------\n        // Main display image url\n        mainSrc: srcTypes.isRequired,\n        // eslint-disable-line react/no-unused-prop-types\n        // Previous display image url (displayed to the left)\n        // If left undefined, movePrev actions will not be performed, and the button not displayed\n        prevSrc: srcTypes,\n        // Next display image url (displayed to the right)\n        // If left undefined, moveNext actions will not be performed, and the button not displayed\n        nextSrc: srcTypes,\n        //-----------------------------\n        // Image thumbnail sources\n        //-----------------------------\n        // Thumbnail image url corresponding to props.mainSrc\n        mainSrcThumbnail: _propTypes2.default.string,\n        // eslint-disable-line react/no-unused-prop-types\n        // Thumbnail image url corresponding to props.prevSrc\n        prevSrcThumbnail: _propTypes2.default.string,\n        // eslint-disable-line react/no-unused-prop-types\n        // Thumbnail image url corresponding to props.nextSrc\n        nextSrcThumbnail: _propTypes2.default.string,\n        // eslint-disable-line react/no-unused-prop-types\n        //-----------------------------\n        // Event Handlers\n        //-----------------------------\n        // Close window event\n        // Should change the parent state such that the lightbox is not rendered\n        onCloseRequest: _propTypes2.default.func.isRequired,\n        // Move to previous image event\n        // Should change the parent state such that props.prevSrc becomes props.mainSrc,\n        //  props.mainSrc becomes props.nextSrc, etc.\n        onMovePrevRequest: _propTypes2.default.func,\n        // Move to next image event\n        // Should change the parent state such that props.nextSrc becomes props.mainSrc,\n        //  props.mainSrc becomes props.prevSrc, etc.\n        onMoveNextRequest: _propTypes2.default.func,\n        // Called when an image fails to load\n        // (imageSrc: string, srcType: string, errorEvent: object): void\n        onImageLoadError: _propTypes2.default.func,\n        // Called when image successfully loads\n        onImageLoad: _propTypes2.default.func,\n        // Open window event\n        onAfterOpen: _propTypes2.default.func,\n        //-----------------------------\n        // Download discouragement settings\n        //-----------------------------\n        // Enable download discouragement (prevents [right-click -> Save Image As...])\n        discourageDownloads: _propTypes2.default.bool,\n        //-----------------------------\n        // Animation settings\n        //-----------------------------\n        // Disable all animation\n        animationDisabled: _propTypes2.default.bool,\n        // Disable animation on actions performed with keyboard shortcuts\n        animationOnKeyInput: _propTypes2.default.bool,\n        // Animation duration (ms)\n        animationDuration: _propTypes2.default.number,\n        //-----------------------------\n        // Keyboard shortcut settings\n        //-----------------------------\n        // Required interval of time (ms) between key actions\n        // (prevents excessively fast navigation of images)\n        keyRepeatLimit: _propTypes2.default.number,\n        // Amount of time (ms) restored after each keyup\n        // (makes rapid key presses slightly faster than holding down the key to navigate images)\n        keyRepeatKeyupBonus: _propTypes2.default.number,\n        //-----------------------------\n        // Image info\n        //-----------------------------\n        // Image title\n        imageTitle: _propTypes2.default.node,\n        // Image caption\n        imageCaption: _propTypes2.default.node,\n        // Optional crossOrigin attribute\n        imageCrossOrigin: _propTypes2.default.string,\n        //-----------------------------\n        // Lightbox style\n        //-----------------------------\n        // Set z-index style, etc., for the parent react-modal (format: https://github.com/reactjs/react-modal#styles )\n        reactModalStyle: _propTypes2.default.shape({}),\n        // Padding (px) between the edge of the window and the lightbox\n        imagePadding: _propTypes2.default.number,\n        wrapperClassName: _propTypes2.default.string,\n        //-----------------------------\n        // Other\n        //-----------------------------\n        // Array of custom toolbar buttons\n        toolbarButtons: _propTypes2.default.arrayOf(_propTypes2.default.node),\n        // When true, clicks outside of the image close the lightbox\n        clickOutsideToClose: _propTypes2.default.bool,\n        // Set to false to disable zoom functionality and hide zoom buttons\n        enableZoom: _propTypes2.default.bool,\n        // Override props set on react-modal (https://github.com/reactjs/react-modal)\n        reactModalProps: _propTypes2.default.shape({}),\n        // Aria-labels\n        nextLabel: _propTypes2.default.string,\n        prevLabel: _propTypes2.default.string,\n        zoomInLabel: _propTypes2.default.string,\n        zoomOutLabel: _propTypes2.default.string,\n        closeLabel: _propTypes2.default.string,\n        imageLoadErrorMessage: _propTypes2.default.node\n      }, ReactImageLightbox.defaultProps = {\n        imageTitle: null,\n        imageCaption: null,\n        toolbarButtons: null,\n        reactModalProps: {},\n        animationDisabled: !1,\n        animationDuration: 300,\n        animationOnKeyInput: !1,\n        clickOutsideToClose: !0,\n        closeLabel: \"Close lightbox\",\n        discourageDownloads: !1,\n        enableZoom: !0,\n        imagePadding: 10,\n        imageCrossOrigin: null,\n        keyRepeatKeyupBonus: 40,\n        keyRepeatLimit: 180,\n        mainSrcThumbnail: null,\n        nextLabel: \"Next image\",\n        nextSrc: null,\n        nextSrcThumbnail: null,\n        onAfterOpen: function onAfterOpen() {},\n        onImageLoadError: function onImageLoadError() {},\n        onImageLoad: function onImageLoad() {},\n        onMoveNextRequest: function onMoveNextRequest() {},\n        onMovePrevRequest: function onMovePrevRequest() {},\n        prevLabel: \"Previous image\",\n        prevSrc: null,\n        prevSrcThumbnail: null,\n        reactModalStyle: {},\n        wrapperClassName: \"\",\n        zoomInLabel: \"Zoom in\",\n        zoomOutLabel: \"Zoom out\",\n        imageLoadErrorMessage: \"This image failed to load\"\n      }, exports.default = ReactImageLightbox;\n    }).call(this, __webpack_require__(0))\n    /***/\n    ;\n  },\n  /* 3 */\n\n  /***/\n  function (module, exports) {\n    module.exports = require(\"react\");\n    /***/\n  },\n  /* 4 */\n\n  /***/\n  function (module, exports) {\n    module.exports = require(\"prop-types\");\n    /***/\n  },\n  /* 5 */\n\n  /***/\n  function (module, exports) {\n    module.exports = require(\"react-modal\");\n    /***/\n  },\n  /* 6 */\n\n  /***/\n  function (module, exports) {\n    module.exports = require(\"is-react\");\n    /***/\n  },\n  /* 7 */\n\n  /***/\n  function (module, exports, __webpack_require__) {\n    \"use strict\";\n    /* WEBPACK VAR INJECTION */\n\n    /* WEBPACK VAR INJECTION */\n\n    (function (global) {\n      Object.defineProperty(exports, \"__esModule\", {\n        value: !0\n      }), exports.translate =\n      /**\n      * Placeholder for future translate functionality\n      */\n      function (str) {\n        var replaceStrings = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n        if (!str) return \"\";\n        var translated = str;\n        replaceStrings && Object.keys(replaceStrings).forEach(function (placeholder) {\n          translated = translated.replace(placeholder, replaceStrings[placeholder]);\n        });\n        return translated;\n      }, exports.getWindowWidth = function () {\n        return void 0 !== global.window ? global.window.innerWidth : 0;\n      }, exports.getWindowHeight = function () {\n        return void 0 !== global.window ? global.window.innerHeight : 0;\n      } // Get the highest window context that isn't cross-origin\n      // (When in an iframe)\n      , exports.getHighestSafeWindowContext = function getHighestSafeWindowContext() {\n        var self = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : global.window.self; // If we reached the top level, return self\n\n        if (self === global.window.top) return self;\n\n        var getOrigin = function getOrigin(href) {\n          return href.match(/(.*\\/\\/.*?)(\\/|$)/)[1];\n        }; // If parent is the same origin, we can move up one context\n        // Reference: https://stackoverflow.com/a/21965342/1601953\n\n\n        if (getOrigin(self.location.href) === getOrigin(self.document.referrer)) return getHighestSafeWindowContext(self.parent); // If a different origin, we consider the current level\n        // as the top reachable one\n\n        return self;\n      }\n      /* WEBPACK VAR INJECTION */\n      ;\n    }).call(this, __webpack_require__(0))\n    /***/\n    ;\n  },\n  /* 8 */\n\n  /***/\n  function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: !0\n    }); // Min image zoom level\n\n    exports.MIN_ZOOM_LEVEL = 0, exports.MAX_ZOOM_LEVEL = 300, exports.ZOOM_RATIO = 1.007, exports.ZOOM_BUTTON_INCREMENT_SIZE = 100, exports.WHEEL_MOVE_X_THRESHOLD = 200, exports.WHEEL_MOVE_Y_THRESHOLD = 1, exports.KEYS = {\n      ESC: 27,\n      LEFT_ARROW: 37,\n      RIGHT_ARROW: 39\n    }, exports.ACTION_NONE = 0, exports.ACTION_MOVE = 1, exports.ACTION_SWIPE = 2, exports.ACTION_PINCH = 3, exports.ACTION_ROTATE = 4, exports.SOURCE_ANY = 0, exports.SOURCE_MOUSE = 1, exports.SOURCE_TOUCH = 2, exports.SOURCE_POINTER = 3, exports.MIN_SWIPE_DISTANCE = 200; // Max image zoom level\n  },\n  /* 9 */\n\n  /***/\n  function (module, exports) {} // removed by extract-text-webpack-plugin\n\n  /***/\n\n  /******/\n  ]);\n});","map":null,"metadata":{},"sourceType":"script"}