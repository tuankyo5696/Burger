{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Burger\\\\myapp\\\\src\\\\containers\\\\Orders\\\\Orders.js\";\nimport React, { Component } from 'react';\nimport axios from './../../axios-order';\nimport Order from './../../components/Order/Order';\nimport withErrorHandler from './../../hoc/withErrorHandle/withErrorHandle';\nimport * as actions from './../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders();\n  }\n\n  render() {\n    let orders = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n\n    if (!this.props.loading) {\n      orders = this.props.orders.map(order => React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, orders);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Burger\\myapp\\src\\containers\\Orders\\Orders.js"],"names":["React","Component","axios","Order","withErrorHandler","actions","connect","Orders","componentDidMount","props","onFetchOrders","render","orders","loading","map","order","id","ingredients","price","mapStateToProps","state","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AAEA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,6BAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AACA,MAAMC,MAAN,SAAqBN,SAArB,CAA+B;AAE3BO,EAAAA,iBAAiB,GAAI;AACjB,SAAKC,KAAL,CAAWC,aAAX;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIC,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAK,CAAC,KAAKH,KAAL,CAAWI,OAAjB,EAA2B;AACvBD,MAAAA,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAAX,CAAkBE,GAAlB,CAAuBC,KAAK,IACjC,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,QAAA,WAAW,EAAED,KAAK,CAACE,WAFvB;AAGI,QAAA,KAAK,EAAEF,KAAK,CAACG,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAT;AAMH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKN,MADL,CADJ;AAKH;;AArB0B;;AAuB/B,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHR,IAAAA,MAAM,EAAEQ,KAAK,CAACL,KAAN,CAAYH,MADjB;AAEHC,IAAAA,OAAO,EAAEO,KAAK,CAACL,KAAN,CAAYF;AAFlB,GAAP;AAIH,CALD;;AAOA,MAAMQ,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,aAAa,EAAG,MAAMY,QAAQ,CAACjB,OAAO,CAACkB,WAAT;AAD3B,GAAP;AAGH,CAJD;;AAKA,eAAejB,OAAO,CAACa,eAAD,EAAiBE,kBAAjB,CAAP,CAA6CjB,gBAAgB,CAACG,MAAD,EAAQL,KAAR,CAA7D,CAAf","sourcesContent":["import React,{Component} from 'react'\r\n\r\nimport axios from './../../axios-order';\r\nimport Order from './../../components/Order/Order';\r\nimport withErrorHandler from './../../hoc/withErrorHandle/withErrorHandle';\r\nimport * as actions from './../../store/actions/index'\r\nimport {connect} from 'react-redux';\r\nclass Orders extends Component {\r\n \r\n    componentDidMount () {\r\n        this.props.onFetchOrders();\r\n    }\r\n\r\n    render(){\r\n        let orders = <Spinner />;\r\n        if ( !this.props.loading ) {\r\n            orders = this.props.orders.map( order => (\r\n                <Order\r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={order.price} />\r\n            ) )\r\n        }\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders : () => dispatch(actions.fetchOrders)\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps) (withErrorHandler(Orders,axios) );"]},"metadata":{},"sourceType":"module"}