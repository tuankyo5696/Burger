import child_process from 'child_process';
import fs from 'fs';
import path from 'path';

// tooling

// destinations
var nodeModulesDir = path.dirname(__dirname);
var reactScriptsDir = path.join(nodeModulesDir, 'react-scripts');
var reactScriptsPackageFile = path.join(reactScriptsDir, 'package.json');
var reactScriptsConfigDev = path.join(reactScriptsDir, 'config', 'webpack.config.dev.js');
var reactScriptsConfigProd = path.join(reactScriptsDir, 'config', 'webpack.config.prod.js');

// replacements
var originalRequire = `require('postcss-flexbugs-fixes')`;
var modifiedRequire = `${originalRequire},require('postcss-use')({ modules: '*' })`;

// version control
var match1x = /^1\./;

// read the react package.json
readFile(reactScriptsPackageFile).then(function (json) {
	return JSON.parse(json);
}).then(function (pkg) {
	// test for a compatible version
	if (match1x.test(pkg.version)) {
		// log progress
		console.log('react-scripts is being updated.');

		return Promise.all([
		// read the config scripts
		readFile(reactScriptsConfigDev), readFile(reactScriptsConfigProd)]).then(
		// update the config scripts
		function (results) {
			return [results[0].replace(modifiedRequire, originalRequire).replace(originalRequire, modifiedRequire), results[1].replace(modifiedRequire, originalRequire).replace(originalRequire, modifiedRequire)];
		}).then(
		// save the updated config scripts
		function (results) {
			return Promise.all([writeFile(reactScriptsConfigDev, results[0]), writeFile(reactScriptsConfigProd, results[1]), exec('npm install postcss-loader', {
				cwd: reactScriptsDir
			})]);
		}).then(function () {
			// log success
			console.log('react-scripts has been updated.');
		});
	} else {
		// log version failure
		console.log(`react-scripts version v${pkg.version}"could not be updated.`);
	}

	return true;
}).catch(function (error) {
	if (error.code === 'ENOENT') {
		// log missing failure
		console.log('react-scripts could not be found.');
		console.error(error);
	} else {
		// log missing failure
		console.log('react-scripts could not be updated.');
		console.error(error);
	}
});

// read a file
function readFile(file) {
	return new Promise(function (resolve, reject) {
		fs.readFile(file, 'utf8', function (error, contents) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}

// write a file
function writeFile(file, contents) {
	return new Promise(function (resolve, reject) {
		fs.writeFile(file, contents, function (error) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}

// child process
function exec(command, options) {
	return new Promise(function (resolve, reject) {
		return child_process.exec(command, options, function (error, stdout, stderr) {
			return error ? reject(stderr) : resolve(stdout);
		});
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbC5lcy5qcyIsInNvdXJjZXMiOlsiaW5zdGFsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0b29saW5nXG5pbXBvcnQgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gZGVzdGluYXRpb25zXG5jb25zdCBub2RlTW9kdWxlc0RpciA9IHBhdGguZGlybmFtZShfX2Rpcm5hbWUpO1xuY29uc3QgcmVhY3RTY3JpcHRzRGlyID0gcGF0aC5qb2luKG5vZGVNb2R1bGVzRGlyLCAncmVhY3Qtc2NyaXB0cycpO1xuY29uc3QgcmVhY3RTY3JpcHRzUGFja2FnZUZpbGUgPSBwYXRoLmpvaW4ocmVhY3RTY3JpcHRzRGlyLCAncGFja2FnZS5qc29uJyk7XG5jb25zdCByZWFjdFNjcmlwdHNDb25maWdEZXYgICA9IHBhdGguam9pbihyZWFjdFNjcmlwdHNEaXIsICdjb25maWcnLCAnd2VicGFjay5jb25maWcuZGV2LmpzJyk7XG5jb25zdCByZWFjdFNjcmlwdHNDb25maWdQcm9kICA9IHBhdGguam9pbihyZWFjdFNjcmlwdHNEaXIsICdjb25maWcnLCAnd2VicGFjay5jb25maWcucHJvZC5qcycpO1xuXG4vLyByZXBsYWNlbWVudHNcbmNvbnN0IG9yaWdpbmFsUmVxdWlyZSA9IGByZXF1aXJlKCdwb3N0Y3NzLWZsZXhidWdzLWZpeGVzJylgO1xuY29uc3QgbW9kaWZpZWRSZXF1aXJlID0gYCR7b3JpZ2luYWxSZXF1aXJlfSxyZXF1aXJlKCdwb3N0Y3NzLXVzZScpKHsgbW9kdWxlczogJyonIH0pYDtcblxuLy8gdmVyc2lvbiBjb250cm9sXG5jb25zdCBtYXRjaDF4ID0gL14xXFwuLztcblxuLy8gcmVhZCB0aGUgcmVhY3QgcGFja2FnZS5qc29uXG5yZWFkRmlsZShyZWFjdFNjcmlwdHNQYWNrYWdlRmlsZSkudGhlbihcblx0anNvbiA9PiBKU09OLnBhcnNlKGpzb24pXG4pLnRoZW4oXG5cdHBrZyA9PiB7XG5cdFx0Ly8gdGVzdCBmb3IgYSBjb21wYXRpYmxlIHZlcnNpb25cblx0XHRpZiAobWF0Y2gxeC50ZXN0KHBrZy52ZXJzaW9uKSkge1xuXHRcdFx0Ly8gbG9nIHByb2dyZXNzXG5cdFx0XHRjb25zb2xlLmxvZygncmVhY3Qtc2NyaXB0cyBpcyBiZWluZyB1cGRhdGVkLicpO1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHQvLyByZWFkIHRoZSBjb25maWcgc2NyaXB0c1xuXHRcdFx0XHRyZWFkRmlsZShyZWFjdFNjcmlwdHNDb25maWdEZXYpLFxuXHRcdFx0XHRyZWFkRmlsZShyZWFjdFNjcmlwdHNDb25maWdQcm9kKVxuXHRcdFx0XSkudGhlbihcblx0XHRcdFx0Ly8gdXBkYXRlIHRoZSBjb25maWcgc2NyaXB0c1xuXHRcdFx0XHRyZXN1bHRzID0+IFtcblx0XHRcdFx0XHRyZXN1bHRzWzBdLnJlcGxhY2UobW9kaWZpZWRSZXF1aXJlLCBvcmlnaW5hbFJlcXVpcmUpLnJlcGxhY2Uob3JpZ2luYWxSZXF1aXJlLCBtb2RpZmllZFJlcXVpcmUpLFxuXHRcdFx0XHRcdHJlc3VsdHNbMV0ucmVwbGFjZShtb2RpZmllZFJlcXVpcmUsIG9yaWdpbmFsUmVxdWlyZSkucmVwbGFjZShvcmlnaW5hbFJlcXVpcmUsIG1vZGlmaWVkUmVxdWlyZSlcblx0XHRcdFx0XVxuXHRcdFx0KS50aGVuKFxuXHRcdFx0XHQvLyBzYXZlIHRoZSB1cGRhdGVkIGNvbmZpZyBzY3JpcHRzXG5cdFx0XHRcdHJlc3VsdHMgPT4gUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHRcdHdyaXRlRmlsZShyZWFjdFNjcmlwdHNDb25maWdEZXYsIHJlc3VsdHNbMF0pLFxuXHRcdFx0XHRcdHdyaXRlRmlsZShyZWFjdFNjcmlwdHNDb25maWdQcm9kLCByZXN1bHRzWzFdKSxcblx0XHRcdFx0XHRleGVjKCducG0gaW5zdGFsbCBwb3N0Y3NzLWxvYWRlcicsIHtcblx0XHRcdFx0XHRcdGN3ZDogcmVhY3RTY3JpcHRzRGlyXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XSlcblx0XHRcdCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdC8vIGxvZyBzdWNjZXNzXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdyZWFjdC1zY3JpcHRzIGhhcyBiZWVuIHVwZGF0ZWQuJyk7XG5cdFx0XHR9KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBsb2cgdmVyc2lvbiBmYWlsdXJlXG5cdFx0XHRjb25zb2xlLmxvZyhgcmVhY3Qtc2NyaXB0cyB2ZXJzaW9uIHYke3BrZy52ZXJzaW9ufVwiY291bGQgbm90IGJlIHVwZGF0ZWQuYCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbikuY2F0Y2goZXJyb3IgPT4ge1xuXHRpZiAoZXJyb3IuY29kZSA9PT0gJ0VOT0VOVCcpIHtcblx0XHQvLyBsb2cgbWlzc2luZyBmYWlsdXJlXG5cdFx0Y29uc29sZS5sb2coJ3JlYWN0LXNjcmlwdHMgY291bGQgbm90IGJlIGZvdW5kLicpO1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIGxvZyBtaXNzaW5nIGZhaWx1cmVcblx0XHRjb25zb2xlLmxvZygncmVhY3Qtc2NyaXB0cyBjb3VsZCBub3QgYmUgdXBkYXRlZC4nKTtcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0fVxufSk7XG5cbi8vIHJlYWQgYSBmaWxlXG5mdW5jdGlvbiByZWFkRmlsZShmaWxlKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ZnMucmVhZEZpbGUoZmlsZSwgJ3V0ZjgnLCAoZXJyb3IsIGNvbnRlbnRzKSA9PiB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUoY29udGVudHMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLy8gd3JpdGUgYSBmaWxlXG5mdW5jdGlvbiB3cml0ZUZpbGUoZmlsZSwgY29udGVudHMpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRmcy53cml0ZUZpbGUoZmlsZSwgY29udGVudHMsIGVycm9yID0+IHtcblx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzb2x2ZShjb250ZW50cyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vLyBjaGlsZCBwcm9jZXNzXG5mdW5jdGlvbiBleGVjKGNvbW1hbmQsIG9wdGlvbnMpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKFxuXHRcdChyZXNvbHZlLCByZWplY3QpID0+IGNoaWxkX3Byb2Nlc3MuZXhlYyhcblx0XHRcdGNvbW1hbmQsXG5cdFx0XHRvcHRpb25zLFxuXHRcdFx0KGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4gZXJyb3IgPyByZWplY3Qoc3RkZXJyKSA6IHJlc29sdmUoc3Rkb3V0KVxuXHRcdClcblx0KTtcbn1cbiJdLCJuYW1lcyI6WyJub2RlTW9kdWxlc0RpciIsInBhdGgiLCJkaXJuYW1lIiwiX19kaXJuYW1lIiwicmVhY3RTY3JpcHRzRGlyIiwiam9pbiIsInJlYWN0U2NyaXB0c1BhY2thZ2VGaWxlIiwicmVhY3RTY3JpcHRzQ29uZmlnRGV2IiwicmVhY3RTY3JpcHRzQ29uZmlnUHJvZCIsIm9yaWdpbmFsUmVxdWlyZSIsIm1vZGlmaWVkUmVxdWlyZSIsIm1hdGNoMXgiLCJyZWFkRmlsZSIsInRoZW4iLCJKU09OIiwicGFyc2UiLCJqc29uIiwidGVzdCIsInBrZyIsInZlcnNpb24iLCJsb2ciLCJQcm9taXNlIiwiYWxsIiwicmVzdWx0cyIsInJlcGxhY2UiLCJ3cml0ZUZpbGUiLCJleGVjIiwiY2F0Y2giLCJlcnJvciIsImNvZGUiLCJmaWxlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnRlbnRzIiwiY29tbWFuZCIsIm9wdGlvbnMiLCJjaGlsZF9wcm9jZXNzIiwic3Rkb3V0Iiwic3RkZXJyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTs7QUFLQSxJQUFNQSxpQkFBaUJDLEtBQUtDLE9BQUwsQ0FBYUMsU0FBYixDQUF2QjtBQUNBLElBQU1DLGtCQUFrQkgsS0FBS0ksSUFBTCxDQUFVTCxjQUFWLEVBQTBCLGVBQTFCLENBQXhCO0FBQ0EsSUFBTU0sMEJBQTBCTCxLQUFLSSxJQUFMLENBQVVELGVBQVYsRUFBMkIsY0FBM0IsQ0FBaEM7QUFDQSxJQUFNRyx3QkFBMEJOLEtBQUtJLElBQUwsQ0FBVUQsZUFBVixFQUEyQixRQUEzQixFQUFxQyx1QkFBckMsQ0FBaEM7QUFDQSxJQUFNSSx5QkFBMEJQLEtBQUtJLElBQUwsQ0FBVUQsZUFBVixFQUEyQixRQUEzQixFQUFxQyx3QkFBckMsQ0FBaEM7OztBQUdBLElBQU1LLGtCQUFtQixtQ0FBekI7QUFDQSxJQUFNQyxrQkFBbUIsR0FBRUQsZUFBZ0IsMkNBQTNDOzs7QUFHQSxJQUFNRSxVQUFVLE1BQWhCOzs7QUFHQUMsU0FBU04sdUJBQVQsRUFBa0NPLElBQWxDLENBQ0M7UUFBUUMsS0FBS0MsS0FBTCxDQUFXQyxJQUFYLENBQVI7Q0FERCxFQUVFSCxJQUZGLENBR0MsZUFBTzs7S0FFRkYsUUFBUU0sSUFBUixDQUFhQyxJQUFJQyxPQUFqQixDQUFKLEVBQStCOztVQUV0QkMsR0FBUixDQUFZLGlDQUFaOztTQUVPQyxRQUFRQyxHQUFSLENBQVk7O1dBRVRmLHFCQUFULENBRmtCLEVBR2xCSyxTQUFTSixzQkFBVCxDQUhrQixDQUFaLEVBSUpLLElBSkk7OztVQU1LLENBQ1ZVLFFBQVEsQ0FBUixFQUFXQyxPQUFYLENBQW1CZCxlQUFuQixFQUFvQ0QsZUFBcEMsRUFBcURlLE9BQXJELENBQTZEZixlQUE3RCxFQUE4RUMsZUFBOUUsQ0FEVSxFQUVWYSxRQUFRLENBQVIsRUFBV0MsT0FBWCxDQUFtQmQsZUFBbkIsRUFBb0NELGVBQXBDLEVBQXFEZSxPQUFyRCxDQUE2RGYsZUFBN0QsRUFBOEVDLGVBQTlFLENBRlUsQ0FBWDtHQU5NLEVBVUxHLElBVks7OztVQVlLUSxRQUFRQyxHQUFSLENBQVksQ0FDdEJHLFVBQVVsQixxQkFBVixFQUFpQ2dCLFFBQVEsQ0FBUixDQUFqQyxDQURzQixFQUV0QkUsVUFBVWpCLHNCQUFWLEVBQWtDZSxRQUFRLENBQVIsQ0FBbEMsQ0FGc0IsRUFHdEJHLEtBQUssNEJBQUwsRUFBbUM7U0FDN0J0QjtJQUROLENBSHNCLENBQVosQ0FBWDtHQVpNLEVBbUJMUyxJQW5CSyxDQW1CQSxZQUFNOztXQUVKTyxHQUFSLENBQVksaUNBQVo7R0FyQk0sQ0FBUDtFQUpELE1BMkJPOztVQUVFQSxHQUFSLENBQWEsMEJBQXlCRixJQUFJQyxPQUFRLHdCQUFsRDs7O1FBR00sSUFBUDtDQXJDRixFQXVDRVEsS0F2Q0YsQ0F1Q1EsaUJBQVM7S0FDWkMsTUFBTUMsSUFBTixLQUFlLFFBQW5CLEVBQTZCOztVQUVwQlQsR0FBUixDQUFZLG1DQUFaO1VBQ1FRLEtBQVIsQ0FBY0EsS0FBZDtFQUhELE1BSU87O1VBRUVSLEdBQVIsQ0FBWSxxQ0FBWjtVQUNRUSxLQUFSLENBQWNBLEtBQWQ7O0NBL0NGOzs7QUFvREEsU0FBU2hCLFFBQVQsQ0FBa0JrQixJQUFsQixFQUF3QjtRQUNoQixJQUFJVCxPQUFKLENBQVksVUFBQ1UsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0tBQ3BDcEIsUUFBSCxDQUFZa0IsSUFBWixFQUFrQixNQUFsQixFQUEwQixVQUFDRixLQUFELEVBQVFLLFFBQVIsRUFBcUI7T0FDMUNMLEtBQUosRUFBVztXQUNIQSxLQUFQO0lBREQsTUFFTztZQUNFSyxRQUFSOztHQUpGO0VBRE0sQ0FBUDs7OztBQVlELFNBQVNSLFNBQVQsQ0FBbUJLLElBQW5CLEVBQXlCRyxRQUF6QixFQUFtQztRQUMzQixJQUFJWixPQUFKLENBQVksVUFBQ1UsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0tBQ3BDUCxTQUFILENBQWFLLElBQWIsRUFBbUJHLFFBQW5CLEVBQTZCLGlCQUFTO09BQ2pDTCxLQUFKLEVBQVc7V0FDSEEsS0FBUDtJQURELE1BRU87WUFDRUssUUFBUjs7R0FKRjtFQURNLENBQVA7Ozs7QUFZRCxTQUFTUCxJQUFULENBQWNRLE9BQWQsRUFBdUJDLE9BQXZCLEVBQWdDO1FBQ3hCLElBQUlkLE9BQUosQ0FDTixVQUFDVSxPQUFELEVBQVVDLE1BQVY7U0FBcUJJLGNBQWNWLElBQWQsQ0FDcEJRLE9BRG9CLEVBRXBCQyxPQUZvQixFQUdwQixVQUFDUCxLQUFELEVBQVFTLE1BQVIsRUFBZ0JDLE1BQWhCO1VBQTJCVixRQUFRSSxPQUFPTSxNQUFQLENBQVIsR0FBeUJQLFFBQVFNLE1BQVIsQ0FBcEQ7R0FIb0IsQ0FBckI7RUFETSxDQUFQOyJ9
