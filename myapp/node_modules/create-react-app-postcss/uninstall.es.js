import fs from 'fs';
import path from 'path';

// tooling

// destinations
var nodeModulesDir = path.dirname(__dirname);
var reactScriptsPackageFile = path.join(nodeModulesDir, 'react-scripts', 'package.json');
var reactScriptsConfigDev = path.join(nodeModulesDir, 'react-scripts', 'config', 'webpack.config.dev.js');
var reactScriptsConfigProd = path.join(nodeModulesDir, 'react-scripts', 'config', 'webpack.config.prod.js');

// replacements
var originalRequire = `require('postcss-flexbugs-fixes')`;
var modifiedRequire = `${originalRequire},require('postcss-use')({ modules: '*' })`;

// version control
var match1x = /^1\./;

// read the react package.json
readFile(reactScriptsPackageFile).then(function (json) {
	return JSON.parse(json);
}).then(function (pkg) {
	// test for a compatible version
	if (match1x.test(pkg.version)) {
		return Promise.all([
		// read the config scripts
		readFile(reactScriptsConfigDev), readFile(reactScriptsConfigProd)]).then(
		// update the config scripts
		function (results) {
			return [results[0].replace(modifiedRequire, originalRequire), results[1].replace(modifiedRequire, originalRequire)];
		}).then(
		// save the updated config scripts
		function (results) {
			return Promise.all([writeFile(reactScriptsConfigDev, results[0]), writeFile(reactScriptsConfigProd, results[1])]);
		});
	}

	return true;
}).catch(function (error) {
	if (error.code === 'ENOENT') {
		// log missing failure
		console.log('react-scripts could not be found.');
		console.error(error);
	} else {
		// log missing failure
		console.log('react-scripts may not be uninstalled.');
		console.error(error);
	}
});

// read a file
function readFile(file) {
	return new Promise(function (resolve, reject) {
		fs.readFile(file, 'utf8', function (error, contents) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}

// write a file
function writeFile(file, contents) {
	return new Promise(function (resolve, reject) {
		fs.writeFile(file, contents, function (error) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pbnN0YWxsLmVzLmpzIiwic291cmNlcyI6WyJ1bmluc3RhbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG9vbGluZ1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyBkZXN0aW5hdGlvbnNcbmNvbnN0IG5vZGVNb2R1bGVzRGlyID0gcGF0aC5kaXJuYW1lKF9fZGlybmFtZSk7XG5jb25zdCByZWFjdFNjcmlwdHNQYWNrYWdlRmlsZSA9IHBhdGguam9pbihub2RlTW9kdWxlc0RpciwgJ3JlYWN0LXNjcmlwdHMnLCAncGFja2FnZS5qc29uJyk7XG5jb25zdCByZWFjdFNjcmlwdHNDb25maWdEZXYgICA9IHBhdGguam9pbihub2RlTW9kdWxlc0RpciwgJ3JlYWN0LXNjcmlwdHMnLCAnY29uZmlnJywgJ3dlYnBhY2suY29uZmlnLmRldi5qcycpO1xuY29uc3QgcmVhY3RTY3JpcHRzQ29uZmlnUHJvZCAgPSBwYXRoLmpvaW4obm9kZU1vZHVsZXNEaXIsICdyZWFjdC1zY3JpcHRzJywgJ2NvbmZpZycsICd3ZWJwYWNrLmNvbmZpZy5wcm9kLmpzJyk7XG5cbi8vIHJlcGxhY2VtZW50c1xuY29uc3Qgb3JpZ2luYWxSZXF1aXJlID0gYHJlcXVpcmUoJ3Bvc3Rjc3MtZmxleGJ1Z3MtZml4ZXMnKWA7XG5jb25zdCBtb2RpZmllZFJlcXVpcmUgPSBgJHtvcmlnaW5hbFJlcXVpcmV9LHJlcXVpcmUoJ3Bvc3Rjc3MtdXNlJykoeyBtb2R1bGVzOiAnKicgfSlgO1xuXG4vLyB2ZXJzaW9uIGNvbnRyb2xcbmNvbnN0IG1hdGNoMXggPSAvXjFcXC4vO1xuXG4vLyByZWFkIHRoZSByZWFjdCBwYWNrYWdlLmpzb25cbnJlYWRGaWxlKHJlYWN0U2NyaXB0c1BhY2thZ2VGaWxlKS50aGVuKFxuXHRqc29uID0+IEpTT04ucGFyc2UoanNvbilcbikudGhlbihcblx0cGtnID0+IHtcblx0XHQvLyB0ZXN0IGZvciBhIGNvbXBhdGlibGUgdmVyc2lvblxuXHRcdGlmIChtYXRjaDF4LnRlc3QocGtnLnZlcnNpb24pKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHQvLyByZWFkIHRoZSBjb25maWcgc2NyaXB0c1xuXHRcdFx0XHRyZWFkRmlsZShyZWFjdFNjcmlwdHNDb25maWdEZXYpLFxuXHRcdFx0XHRyZWFkRmlsZShyZWFjdFNjcmlwdHNDb25maWdQcm9kKVxuXHRcdFx0XSkudGhlbihcblx0XHRcdFx0Ly8gdXBkYXRlIHRoZSBjb25maWcgc2NyaXB0c1xuXHRcdFx0XHRyZXN1bHRzID0+IFtcblx0XHRcdFx0XHRyZXN1bHRzWzBdLnJlcGxhY2UobW9kaWZpZWRSZXF1aXJlLCBvcmlnaW5hbFJlcXVpcmUpLFxuXHRcdFx0XHRcdHJlc3VsdHNbMV0ucmVwbGFjZShtb2RpZmllZFJlcXVpcmUsIG9yaWdpbmFsUmVxdWlyZSlcblx0XHRcdFx0XVxuXHRcdFx0KS50aGVuKFxuXHRcdFx0XHQvLyBzYXZlIHRoZSB1cGRhdGVkIGNvbmZpZyBzY3JpcHRzXG5cdFx0XHRcdHJlc3VsdHMgPT4gUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHRcdHdyaXRlRmlsZShyZWFjdFNjcmlwdHNDb25maWdEZXYsIHJlc3VsdHNbMF0pLFxuXHRcdFx0XHRcdHdyaXRlRmlsZShyZWFjdFNjcmlwdHNDb25maWdQcm9kLCByZXN1bHRzWzFdKVxuXHRcdFx0XHRdKVxuXHRcdFx0KVxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG4pLmNhdGNoKGVycm9yID0+IHtcblx0aWYgKGVycm9yLmNvZGUgPT09ICdFTk9FTlQnKSB7XG5cdFx0Ly8gbG9nIG1pc3NpbmcgZmFpbHVyZVxuXHRcdGNvbnNvbGUubG9nKCdyZWFjdC1zY3JpcHRzIGNvdWxkIG5vdCBiZSBmb3VuZC4nKTtcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0fSBlbHNlIHtcblx0XHQvLyBsb2cgbWlzc2luZyBmYWlsdXJlXG5cdFx0Y29uc29sZS5sb2coJ3JlYWN0LXNjcmlwdHMgbWF5IG5vdCBiZSB1bmluc3RhbGxlZC4nKTtcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0fVxufSk7XG5cbi8vIHJlYWQgYSBmaWxlXG5mdW5jdGlvbiByZWFkRmlsZShmaWxlKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ZnMucmVhZEZpbGUoZmlsZSwgJ3V0ZjgnLCAoZXJyb3IsIGNvbnRlbnRzKSA9PiB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUoY29udGVudHMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLy8gd3JpdGUgYSBmaWxlXG5mdW5jdGlvbiB3cml0ZUZpbGUoZmlsZSwgY29udGVudHMpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRmcy53cml0ZUZpbGUoZmlsZSwgY29udGVudHMsIGVycm9yID0+IHtcblx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzb2x2ZShjb250ZW50cyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuIl0sIm5hbWVzIjpbIm5vZGVNb2R1bGVzRGlyIiwicGF0aCIsImRpcm5hbWUiLCJfX2Rpcm5hbWUiLCJyZWFjdFNjcmlwdHNQYWNrYWdlRmlsZSIsImpvaW4iLCJyZWFjdFNjcmlwdHNDb25maWdEZXYiLCJyZWFjdFNjcmlwdHNDb25maWdQcm9kIiwib3JpZ2luYWxSZXF1aXJlIiwibW9kaWZpZWRSZXF1aXJlIiwibWF0Y2gxeCIsInJlYWRGaWxlIiwidGhlbiIsIkpTT04iLCJwYXJzZSIsImpzb24iLCJ0ZXN0IiwicGtnIiwidmVyc2lvbiIsIlByb21pc2UiLCJhbGwiLCJyZXN1bHRzIiwicmVwbGFjZSIsIndyaXRlRmlsZSIsImNhdGNoIiwi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
