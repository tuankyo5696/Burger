'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var child_process = _interopDefault(require('child_process'));
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

// tooling

// destinations
var nodeModulesDir = path.dirname(__dirname);
var reactScriptsDir = path.join(nodeModulesDir, 'react-scripts');
var reactScriptsPackageFile = path.join(reactScriptsDir, 'package.json');
var reactScriptsConfigDev = path.join(reactScriptsDir, 'config', 'webpack.config.dev.js');
var reactScriptsConfigProd = path.join(reactScriptsDir, 'config', 'webpack.config.prod.js');

// replacements
var originalRequire = `require('postcss-flexbugs-fixes')`;
var modifiedRequire = `${originalRequire},require('postcss-use')({ modules: '*' })`;

// version control
var match1x = /^1\./;

// read the react package.json
readFile(reactScriptsPackageFile).then(function (json) {
	return JSON.parse(json);
}).then(function (pkg) {
	// test for a compatible version
	if (match1x.test(pkg.version)) {
		// log progress
		console.log('react-scripts is being updated.');

		return Promise.all([
		// read the config scripts
		readFile(reactScriptsConfigDev), readFile(reactScriptsConfigProd)]).then(
		// update the config scripts
		function (results) {
			return [results[0].replace(modifiedRequire, originalRequire).replace(originalRequire, modifiedRequire), results[1].replace(modifiedRequire, originalRequire).replace(originalRequire, modifiedRequire)];
		}).then(
		// save the updated config scripts
		function (results) {
			return Promise.all([writeFile(reactScriptsConfigDev, results[0]), writeFile(reactScriptsConfigProd, results[1]), exec('npm install postcss-loader', {
				cwd: reactScriptsDir
			})]);
		}).then(function () {
			// log success
			console.log('react-scripts has been updated.');
		});
	} else {
		// log version failure
		console.log(`react-scripts version v${pkg.version}"could not be updated.`);
	}

	return true;
}).catch(function (error) {
	if (error.code === 'ENOENT') {
		// log missing failure
		console.log('react-scripts could not be found.');
		console.error(error);
	} else {
		// log missing failure
		console.log('react-scripts could not be updated.');
		console.error(error);
	}
});

// read a file
function readFile(file) {
	return new Promise(function (resolve, reject) {
		fs.readFile(file, 'utf8', function (error, contents) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}

// write a file
function writeFile(file, contents) {
	return new Promise(function (resolve, reject) {
		fs.writeFile(file, contents, function (error) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}

// child process
function exec(command, options) {
	return new Promise(function (resolve, reject) {
		return child_process.exec(command, options, function (error, stdout, stderr) {
			return error ? reject(stderr) : resolve(stdout);
		});
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbC5janMuanMiLCJzb3VyY2VzIjpbImluc3RhbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG9vbGluZ1xuaW1wb3J0IGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIGRlc3RpbmF0aW9uc1xuY29uc3Qgbm9kZU1vZHVsZXNEaXIgPSBwYXRoLmRpcm5hbWUoX19kaXJuYW1lKTtcbmNvbnN0IHJlYWN0U2NyaXB0c0RpciA9IHBhdGguam9pbihub2RlTW9kdWxlc0RpciwgJ3JlYWN0LXNjcmlwdHMnKTtcbmNvbnN0IHJlYWN0U2NyaXB0c1BhY2thZ2VGaWxlID0gcGF0aC5qb2luKHJlYWN0U2NyaXB0c0RpciwgJ3BhY2thZ2UuanNvbicpO1xuY29uc3QgcmVhY3RTY3JpcHRzQ29uZmlnRGV2ICAgPSBwYXRoLmpvaW4ocmVhY3RTY3JpcHRzRGlyLCAnY29uZmlnJywgJ3dlYnBhY2suY29uZmlnLmRldi5qcycpO1xuY29uc3QgcmVhY3RTY3JpcHRzQ29uZmlnUHJvZCAgPSBwYXRoLmpvaW4ocmVhY3RTY3JpcHRzRGlyLCAnY29uZmlnJywgJ3dlYnBhY2suY29uZmlnLnByb2QuanMnKTtcblxuLy8gcmVwbGFjZW1lbnRzXG5jb25zdCBvcmlnaW5hbFJlcXVpcmUgPSBgcmVxdWlyZSgncG9zdGNzcy1mbGV4YnVncy1maXhlcycpYDtcbmNvbnN0IG1vZGlmaWVkUmVxdWlyZSA9IGAke29yaWdpbmFsUmVxdWlyZX0scmVxdWlyZSgncG9zdGNzcy11c2UnKSh7IG1vZHVsZXM6ICcqJyB9KWA7XG5cbi8vIHZlcnNpb24gY29udHJvbFxuY29uc3QgbWF0Y2gxeCA9IC9eMVxcLi87XG5cbi8vIHJlYWQgdGhlIHJlYWN0IHBhY2thZ2UuanNvblxucmVhZEZpbGUocmVhY3RTY3JpcHRzUGFja2FnZUZpbGUpLnRoZW4oXG5cdGpzb24gPT4gSlNPTi5wYXJzZShqc29uKVxuKS50aGVuKFxuXHRwa2cgPT4ge1xuXHRcdC8vIHRlc3QgZm9yIGEgY29tcGF0aWJsZSB2ZXJzaW9uXG5cdFx0aWYgKG1hdGNoMXgudGVzdChwa2cudmVyc2lvbikpIHtcblx0XHRcdC8vIGxvZyBwcm9ncmVzc1xuXHRcdFx0Y29uc29sZS5sb2coJ3JlYWN0LXNjcmlwdHMgaXMgYmVpbmcgdXBkYXRlZC4nKTtcblxuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFtcblx0XHRcdFx0Ly8gcmVhZCB0aGUgY29uZmlnIHNjcmlwdHNcblx0XHRcdFx0cmVhZEZpbGUocmVhY3RTY3JpcHRzQ29uZmlnRGV2KSxcblx0XHRcdFx0cmVhZEZpbGUocmVhY3RTY3JpcHRzQ29uZmlnUHJvZClcblx0XHRcdF0pLnRoZW4oXG5cdFx0XHRcdC8vIHVwZGF0ZSB0aGUgY29uZmlnIHNjcmlwdHNcblx0XHRcdFx0cmVzdWx0cyA9PiBbXG5cdFx0XHRcdFx0cmVzdWx0c1swXS5yZXBsYWNlKG1vZGlmaWVkUmVxdWlyZSwgb3JpZ2luYWxSZXF1aXJlKS5yZXBsYWNlKG9yaWdpbmFsUmVxdWlyZSwgbW9kaWZpZWRSZXF1aXJlKSxcblx0XHRcdFx0XHRyZXN1bHRzWzFdLnJlcGxhY2UobW9kaWZpZWRSZXF1aXJlLCBvcmlnaW5hbFJlcXVpcmUpLnJlcGxhY2Uob3JpZ2luYWxSZXF1aXJlLCBtb2RpZmllZFJlcXVpcmUpXG5cdFx0XHRcdF1cblx0XHRcdCkudGhlbihcblx0XHRcdFx0Ly8gc2F2ZSB0aGUgdXBkYXRlZCBjb25maWcgc2NyaXB0c1xuXHRcdFx0XHRyZXN1bHRzID0+IFByb21pc2UuYWxsKFtcblx0XHRcdFx0XHR3cml0ZUZpbGUocmVhY3RTY3JpcHRzQ29uZmlnRGV2LCByZXN1bHRzWzBdKSxcblx0XHRcdFx0XHR3cml0ZUZpbGUocmVhY3RTY3JpcHRzQ29uZmlnUHJvZCwgcmVzdWx0c1sxXSksXG5cdFx0XHRcdFx0ZXhlYygnbnBtIGluc3RhbGwgcG9zdGNzcy1sb2FkZXInLCB7XG5cdFx0XHRcdFx0XHRjd2Q6IHJlYWN0U2NyaXB0c0RpclxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdF0pXG5cdFx0XHQpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHQvLyBsb2cgc3VjY2Vzc1xuXHRcdFx0XHRjb25zb2xlLmxvZygncmVhY3Qtc2NyaXB0cyBoYXMgYmVlbiB1cGRhdGVkLicpO1xuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gbG9nIHZlcnNpb24gZmFpbHVyZVxuXHRcdFx0Y29uc29sZS5sb2coYHJlYWN0LXNjcmlwdHMgdmVyc2lvbiB2JHtwa2cudmVyc2lvbn1cImNvdWxkIG5vdCBiZSB1cGRhdGVkLmApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG4pLmNhdGNoKGVycm9yID0+IHtcblx0aWYgKGVycm9yLmNvZGUgPT09ICdFTk9FTlQnKSB7XG5cdFx0Ly8gbG9nIG1pc3NpbmcgZmFpbHVyZVxuXHRcdGNvbnNvbGUubG9nKCdyZWFjdC1zY3JpcHRzIGNvdWxkIG5vdCBiZSBmb3VuZC4nKTtcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0fSBlbHNlIHtcblx0XHQvLyBsb2cgbWlzc2luZyBmYWlsdXJlXG5cdFx0Y29uc29sZS5sb2coJ3JlYWN0LXNjcmlwdHMgY291bGQgbm90IGJlIHVwZGF0ZWQuJyk7XG5cdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdH1cbn0pO1xuXG4vLyByZWFkIGEgZmlsZVxuZnVuY3Rpb24gcmVhZEZpbGUoZmlsZSkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGZzLnJlYWRGaWxlKGZpbGUsICd1dGY4JywgKGVycm9yLCBjb250ZW50cykgPT4ge1xuXHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXNvbHZlKGNvbnRlbnRzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8vIHdyaXRlIGEgZmlsZVxuZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGUsIGNvbnRlbnRzKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ZnMud3JpdGVGaWxlKGZpbGUsIGNvbnRlbnRzLCBlcnJvciA9PiB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUoY29udGVudHMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLy8gY2hpbGQgcHJvY2Vzc1xuZnVuY3Rpb24gZXhlYyhjb21tYW5kLCBvcHRpb25zKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZShcblx0XHQocmVzb2x2ZSwgcmVqZWN0KSA9PiBjaGlsZF9wcm9jZXNzLmV4ZWMoXG5cdFx0XHRjb21tYW5kLFxuXHRcdFx0b3B0aW9ucyxcblx0XHRcdChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IGVycm9yID8gcmVqZWN0KHN0ZGVycikgOiByZXNvbHZlKHN0ZG91dClcblx0XHQpXG5cdCk7XG59XG4iXSwibmFtZXMiOlsibm9kZU1vZHVsZXNEaXIiLCJwYXRoIiwiZGlybmFtZSIsIl9fZGlybmFtZSIsInJlYWN0U2NyaXB0c0RpciIsImpvaW4iLCJyZWFjdFNjcmlwdHNQYWNrYWdlRmlsZSIsInJlYWN0U2NyaXB0c0NvbmZpZ0RldiIsInJlYWN0U2NyaXB0c0NvbmZpZ1Byb2QiLCJvcmlnaW5hbFJlcXVpcmUiLCJtb2RpZmllZFJlcXVpcmUiLCJtYXRjaDF4IiwicmVhZEZpbGUiLCJ0aGVuIiwiSlNPTiIsInBhcnNlIiwianNvbiIsInRlc3QiLCJwa2ciLCJ2ZXJzaW9uIiwibG9nIiwiUHJvbWlzZSIsImFsbCIsInJlc3VsdHMiLCJyZXBsYWNlIiwid3JpdGVGaWxlIiwiZXhlYyIsImNhdGNoIiwiZXJyb3IiLCJjb2RlIiwiZmlsZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb250ZW50cyIsImNvbW1hbmQiLCJvcHRpb25z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
