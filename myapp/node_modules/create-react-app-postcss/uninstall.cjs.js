'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

// tooling

// destinations
var nodeModulesDir = path.dirname(__dirname);
var reactScriptsPackageFile = path.join(nodeModulesDir, 'react-scripts', 'package.json');
var reactScriptsConfigDev = path.join(nodeModulesDir, 'react-scripts', 'config', 'webpack.config.dev.js');
var reactScriptsConfigProd = path.join(nodeModulesDir, 'react-scripts', 'config', 'webpack.config.prod.js');

// replacements
var originalRequire = `require('postcss-flexbugs-fixes')`;
var modifiedRequire = `${originalRequire},require('postcss-use')({ modules: '*' })`;

// version control
var match1x = /^1\./;

// read the react package.json
readFile(reactScriptsPackageFile).then(function (json) {
	return JSON.parse(json);
}).then(function (pkg) {
	// test for a compatible version
	if (match1x.test(pkg.version)) {
		return Promise.all([
		// read the config scripts
		readFile(reactScriptsConfigDev), readFile(reactScriptsConfigProd)]).then(
		// update the config scripts
		function (results) {
			return [results[0].replace(modifiedRequire, originalRequire), results[1].replace(modifiedRequire, originalRequire)];
		}).then(
		// save the updated config scripts
		function (results) {
			return Promise.all([writeFile(reactScriptsConfigDev, results[0]), writeFile(reactScriptsConfigProd, results[1])]);
		});
	}

	return true;
}).catch(function (error) {
	if (error.code === 'ENOENT') {
		// log missing failure
		console.log('react-scripts could not be found.');
		console.error(error);
	} else {
		// log missing failure
		console.log('react-scripts may not be uninstalled.');
		console.error(error);
	}
});

// read a file
function readFile(file) {
	return new Promise(function (resolve, reject) {
		fs.readFile(file, 'utf8', function (error, contents) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}

// write a file
function writeFile(file, contents) {
	return new Promise(function (resolve, reject) {
		fs.writeFile(file, contents, function (error) {
			if (error) {
				reject(error);
			} else {
				resolve(contents);
			}
		});
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pbnN0YWxsLmNqcy5qcyIsInNvdXJjZXMiOlsidW5pbnN0YWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRvb2xpbmdcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gZGVzdGluYXRpb25zXG5jb25zdCBub2RlTW9kdWxlc0RpciA9IHBhdGguZGlybmFtZShfX2Rpcm5hbWUpO1xuY29uc3QgcmVhY3RTY3JpcHRzUGFja2FnZUZpbGUgPSBwYXRoLmpvaW4obm9kZU1vZHVsZXNEaXIsICdyZWFjdC1zY3JpcHRzJywgJ3BhY2thZ2UuanNvbicpO1xuY29uc3QgcmVhY3RTY3JpcHRzQ29uZmlnRGV2ICAgPSBwYXRoLmpvaW4obm9kZU1vZHVsZXNEaXIsICdyZWFjdC1zY3JpcHRzJywgJ2NvbmZpZycsICd3ZWJwYWNrLmNvbmZpZy5kZXYuanMnKTtcbmNvbnN0IHJlYWN0U2NyaXB0c0NvbmZpZ1Byb2QgID0gcGF0aC5qb2luKG5vZGVNb2R1bGVzRGlyLCAncmVhY3Qtc2NyaXB0cycsICdjb25maWcnLCAnd2VicGFjay5jb25maWcucHJvZC5qcycpO1xuXG4vLyByZXBsYWNlbWVudHNcbmNvbnN0IG9yaWdpbmFsUmVxdWlyZSA9IGByZXF1aXJlKCdwb3N0Y3NzLWZsZXhidWdzLWZpeGVzJylgO1xuY29uc3QgbW9kaWZpZWRSZXF1aXJlID0gYCR7b3JpZ2luYWxSZXF1aXJlfSxyZXF1aXJlKCdwb3N0Y3NzLXVzZScpKHsgbW9kdWxlczogJyonIH0pYDtcblxuLy8gdmVyc2lvbiBjb250cm9sXG5jb25zdCBtYXRjaDF4ID0gL14xXFwuLztcblxuLy8gcmVhZCB0aGUgcmVhY3QgcGFja2FnZS5qc29uXG5yZWFkRmlsZShyZWFjdFNjcmlwdHNQYWNrYWdlRmlsZSkudGhlbihcblx0anNvbiA9PiBKU09OLnBhcnNlKGpzb24pXG4pLnRoZW4oXG5cdHBrZyA9PiB7XG5cdFx0Ly8gdGVzdCBmb3IgYSBjb21wYXRpYmxlIHZlcnNpb25cblx0XHRpZiAobWF0Y2gxeC50ZXN0KHBrZy52ZXJzaW9uKSkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFtcblx0XHRcdFx0Ly8gcmVhZCB0aGUgY29uZmlnIHNjcmlwdHNcblx0XHRcdFx0cmVhZEZpbGUocmVhY3RTY3JpcHRzQ29uZmlnRGV2KSxcblx0XHRcdFx0cmVhZEZpbGUocmVhY3RTY3JpcHRzQ29uZmlnUHJvZClcblx0XHRcdF0pLnRoZW4oXG5cdFx0XHRcdC8vIHVwZGF0ZSB0aGUgY29uZmlnIHNjcmlwdHNcblx0XHRcdFx0cmVzdWx0cyA9PiBbXG5cdFx0XHRcdFx0cmVzdWx0c1swXS5yZXBsYWNlKG1vZGlmaWVkUmVxdWlyZSwgb3JpZ2luYWxSZXF1aXJlKSxcblx0XHRcdFx0XHRyZXN1bHRzWzFdLnJlcGxhY2UobW9kaWZpZWRSZXF1aXJlLCBvcmlnaW5hbFJlcXVpcmUpXG5cdFx0XHRcdF1cblx0XHRcdCkudGhlbihcblx0XHRcdFx0Ly8gc2F2ZSB0aGUgdXBkYXRlZCBjb25maWcgc2NyaXB0c1xuXHRcdFx0XHRyZXN1bHRzID0+IFByb21pc2UuYWxsKFtcblx0XHRcdFx0XHR3cml0ZUZpbGUocmVhY3RTY3JpcHRzQ29uZmlnRGV2LCByZXN1bHRzWzBdKSxcblx0XHRcdFx0XHR3cml0ZUZpbGUocmVhY3RTY3JpcHRzQ29uZmlnUHJvZCwgcmVzdWx0c1sxXSlcblx0XHRcdFx0XSlcblx0XHRcdClcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuKS5jYXRjaChlcnJvciA9PiB7XG5cdGlmIChlcnJvci5jb2RlID09PSAnRU5PRU5UJykge1xuXHRcdC8vIGxvZyBtaXNzaW5nIGZhaWx1cmVcblx0XHRjb25zb2xlLmxvZygncmVhY3Qtc2NyaXB0cyBjb3VsZCBub3QgYmUgZm91bmQuJyk7XG5cdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gbG9nIG1pc3NpbmcgZmFpbHVyZVxuXHRcdGNvbnNvbGUubG9nKCdyZWFjdC1zY3JpcHRzIG1heSBub3QgYmUgdW5pbnN0YWxsZWQuJyk7XG5cdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdH1cbn0pO1xuXG4vLyByZWFkIGEgZmlsZVxuZnVuY3Rpb24gcmVhZEZpbGUoZmlsZSkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGZzLnJlYWRGaWxlKGZpbGUsICd1dGY4JywgKGVycm9yLCBjb250ZW50cykgPT4ge1xuXHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXNvbHZlKGNvbnRlbnRzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8vIHdyaXRlIGEgZmlsZVxuZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGUsIGNvbnRlbnRzKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ZnMud3JpdGVGaWxlKGZpbGUsIGNvbnRlbnRzLCBlcnJvciA9PiB7XG5cdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUoY29udGVudHMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cbiJdLCJuYW1lcyI6WyJub2RlTW9kdWxlc0RpciIsInBhdGgiLCJkaXJuYW1lIiwiX19kaXJuYW1lIiwicmVhY3RTY3JpcHRzUGFja2FnZUZpbGUiLCJqb2luIiwicmVhY3RTY3JpcHRzQ29uZmlnRGV2IiwicmVhY3RTY3JpcHRzQ29uZmlnUHJvZCIsIm9yaWdpbmFsUmVxdWlyZSIsIm1vZGlmaWVkUmVxdWlyZSIsIm1hdGNoMXgiLCJyZWFkRmlsZSIsInRoZW4iLCJKU09OIiwicGFyc2UiLCJqc29uIiwidGVzdCIsInBrZyIsInZlcnNpb24iLCJQcm9taXNlIiwiYWxsIiwicmVzdWx0cyIsInJlcGxhY2UiLCJ3cml0ZUZpbGUiLCJjYXRjaCIsImVycm9yIiwiY29kZSIsImxvZyIsImZpbGUiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29udGVudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBOztBQUlBLElBQU1BLGlCQUFpQkMsS0FBS0MsT0FBTCxDQUFhQyxTQUFiLENBQXZCO0FBQ0EsSUFBTUMsMEJBQTBCSCxLQUFLSSxJQUFMLENBQVVMLGNBQVYsRUFBMEIsZUFBMUIsRUFBMkMsY0FBM0MsQ0FBaEM7QUFDQSxJQUFNTSx3QkFBMEJMLEtBQUtJLElBQUwsQ0FBVUwsY0FBVixFQUEwQixlQUExQixFQUEyQyxRQUEzQyxFQUFxRCx1QkFBckQsQ0FBaEM7QUFDQSxJQUFNTyx5QkFBMEJOLEtBQUtJLElBQUwsQ0FBVUwsY0FBVixFQUEwQixlQUExQixFQUEyQyxRQUEzQyxFQUFxRCx3QkFBckQsQ0FBaEM7OztBQUdBLElBQU1RLGtCQUFtQixtQ0FBekI7QUFDQSxJQUFNQyxrQkFBbUIsR0FBRUQsZUFBZ0IsMkNBQTNDOzs7QUFHQSxJQUFNRSxVQUFVLE1BQWhCOzs7QUFHQUMsU0FBU1AsdUJBQVQsRUFBa0NRLElBQWxDLENBQ0M7UUFBUUMsS0FBS0MsS0FBTCxDQUFXQyxJQUFYLENBQVI7Q0FERCxFQUVFSCxJQUZGLENBR0MsZUFBTzs7S0FFRkYsUUFBUU0sSUFBUixDQUFhQyxJQUFJQyxPQUFqQixDQUFKLEVBQStCO1NBQ3ZCQyxRQUFRQyxHQUFSLENBQVk7O1dBRVRkLHFCQUFULENBRmtCLEVBR2xCSyxTQUFTSixzQkFBVCxDQUhrQixDQUFaLEVBSUpLLElBSkk7OztVQU1LLENBQ1ZTLFFBQVEsQ0FBUixFQUFXQyxPQUFYLENBQW1CYixlQUFuQixFQUFvQ0QsZUFBcEMsQ0FEVSxFQUVWYSxRQUFRLENBQVIsRUFBV0MsT0FBWCxDQUFtQmIsZUFBbkIsRUFBb0NELGVBQXBDLENBRlUsQ0FBWDtHQU5NLEVBVUxJLElBVks7OztVQVlLTyxRQUFRQyxHQUFSLENBQVksQ0FDdEJHLFVBQVVqQixxQkFBVixFQUFpQ2UsUUFBUSxDQUFSLENBQWpDLENBRHNCLEVBRXRCRSxVQUFVaEIsc0JBQVYsRUFBa0NjLFFBQVEsQ0FBUixDQUFsQyxDQUZzQixDQUFaLENBQVg7R0FaTSxDQUFQOzs7UUFtQk0sSUFBUDtDQXpCRixFQTJCRUcsS0EzQkYsQ0EyQlEsaUJBQVM7S0FDWkMsTUFBTUMsSUFBTixLQUFlLFFBQW5CLEVBQTZCOztVQUVwQkMsR0FBUixDQUFZLG1DQUFaO1VBQ1FGLEtBQVIsQ0FBY0EsS0FBZDtFQUhELE1BSU87O1VBRUVFLEdBQVIsQ0FBWSx1Q0FBWjtVQUNRRixLQUFSLENBQWNBLEtBQWQ7O0NBbkNGOzs7QUF3Q0EsU0FBU2QsUUFBVCxDQUFrQmlCLElBQWxCLEVBQXdCO1FBQ2hCLElBQUlULE9BQUosQ0FBWSxVQUFDVSxPQUFELEVBQVVDLE1BQVYsRUFBcUI7S0FDcENuQixRQUFILENBQVlpQixJQUFaLEVBQWtCLE1BQWxCLEVBQTBCLFVBQUNILEtBQUQsRUFBUU0sUUFBUixFQUFxQjtPQUMxQ04sS0FBSixFQUFXO1dBQ0hBLEtBQVA7SUFERCxNQUVPO1lBQ0VNLFFBQVI7O0dBSkY7RUFETSxDQUFQOzs7O0FBWUQsU0FBU1IsU0FBVCxDQUFtQkssSUFBbkIsRUFBeUJHLFFBQXpCLEVBQW1DO1FBQzNCLElBQUlaLE9BQUosQ0FBWSxVQUFDVSxPQUFELEVBQVVDLE1BQVYsRUFBcUI7S0FDcENQLFNBQUgsQ0FBYUssSUFBYixFQUFtQkcsUUFBbkIsRUFBNkIsaUJBQVM7T0FDakNOLEtBQUosRUFBVztXQUNIQSxLQUFQO0lBREQsTUFFTztZQUNFTSxRQUFSOztHQUpGO0VBRE0sQ0FBUDsifQ==
